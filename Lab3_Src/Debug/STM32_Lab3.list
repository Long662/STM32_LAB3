
STM32_Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002624  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002730  08002730  00012730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002754  08002754  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08002754  08002754  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002754  08002754  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002754  08002754  00012754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002758  08002758  00012758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  0800275c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000003c  08002798  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08002798  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f35  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  00029f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e52  00000000  00000000  0002d0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bfda  00000000  00000000  00043ef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827b7  00000000  00000000  0004fecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2683  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a4  00000000  00000000  000d26d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002718 	.word	0x08002718

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002718 	.word	0x08002718

0800014c <Mode_1>:

enum Led_state{RED, GREEN, YELLOW};
enum Led_state Main_led = RED;
enum Led_state Sub_led = GREEN;

void Mode_1(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	if (Sec_flag){
 8000150:	4b74      	ldr	r3, [pc, #464]	; (8000324 <Mode_1+0x1d8>)
 8000152:	781b      	ldrb	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	f000 80e3 	beq.w	8000320 <Mode_1+0x1d4>
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800015a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800015e:	4872      	ldr	r0, [pc, #456]	; (8000328 <Mode_1+0x1dc>)
 8000160:	f001 fadd 	bl	800171e <HAL_GPIO_TogglePin>
		Update_Display(Main_Dur_count, Sub_Dur_count);
 8000164:	4b71      	ldr	r3, [pc, #452]	; (800032c <Mode_1+0x1e0>)
 8000166:	781b      	ldrb	r3, [r3, #0]
 8000168:	4a71      	ldr	r2, [pc, #452]	; (8000330 <Mode_1+0x1e4>)
 800016a:	7812      	ldrb	r2, [r2, #0]
 800016c:	4611      	mov	r1, r2
 800016e:	4618      	mov	r0, r3
 8000170:	f000 fd3c 	bl	8000bec <Update_Display>
		// FSM for main led
		switch (Main_led) {
 8000174:	4b6f      	ldr	r3, [pc, #444]	; (8000334 <Mode_1+0x1e8>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b02      	cmp	r3, #2
 800017a:	d021      	beq.n	80001c0 <Mode_1+0x74>
 800017c:	2b02      	cmp	r3, #2
 800017e:	dc55      	bgt.n	800022c <Mode_1+0xe0>
 8000180:	2b00      	cmp	r3, #0
 8000182:	d002      	beq.n	800018a <Mode_1+0x3e>
 8000184:	2b01      	cmp	r3, #1
 8000186:	d036      	beq.n	80001f6 <Mode_1+0xaa>
					Main_led = YELLOW;
					Main_Dur_count = YELLOW_Dur_count;
				}
				break;
			default: // DO NOT THING
				break;
 8000188:	e050      	b.n	800022c <Mode_1+0xe0>
				HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, GPIO_PIN_RESET);
 800018a:	2200      	movs	r2, #0
 800018c:	2102      	movs	r1, #2
 800018e:	486a      	ldr	r0, [pc, #424]	; (8000338 <Mode_1+0x1ec>)
 8000190:	f001 faad 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, GPIO_PIN_SET);
 8000194:	2201      	movs	r2, #1
 8000196:	2104      	movs	r1, #4
 8000198:	4867      	ldr	r0, [pc, #412]	; (8000338 <Mode_1+0x1ec>)
 800019a:	f001 faa8 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, GPIO_PIN_SET);
 800019e:	2201      	movs	r2, #1
 80001a0:	2108      	movs	r1, #8
 80001a2:	4865      	ldr	r0, [pc, #404]	; (8000338 <Mode_1+0x1ec>)
 80001a4:	f001 faa3 	bl	80016ee <HAL_GPIO_WritePin>
				if (Main_Dur_count <= 0) {
 80001a8:	4b60      	ldr	r3, [pc, #384]	; (800032c <Mode_1+0x1e0>)
 80001aa:	781b      	ldrb	r3, [r3, #0]
 80001ac:	2b00      	cmp	r3, #0
 80001ae:	d13f      	bne.n	8000230 <Mode_1+0xe4>
					Main_led = GREEN;
 80001b0:	4b60      	ldr	r3, [pc, #384]	; (8000334 <Mode_1+0x1e8>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	701a      	strb	r2, [r3, #0]
					Main_Dur_count = GREEN_Dur_count;
 80001b6:	4b61      	ldr	r3, [pc, #388]	; (800033c <Mode_1+0x1f0>)
 80001b8:	781a      	ldrb	r2, [r3, #0]
 80001ba:	4b5c      	ldr	r3, [pc, #368]	; (800032c <Mode_1+0x1e0>)
 80001bc:	701a      	strb	r2, [r3, #0]
				break;
 80001be:	e037      	b.n	8000230 <Mode_1+0xe4>
				HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, GPIO_PIN_SET);
 80001c0:	2201      	movs	r2, #1
 80001c2:	2102      	movs	r1, #2
 80001c4:	485c      	ldr	r0, [pc, #368]	; (8000338 <Mode_1+0x1ec>)
 80001c6:	f001 fa92 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, GPIO_PIN_RESET);
 80001ca:	2200      	movs	r2, #0
 80001cc:	2104      	movs	r1, #4
 80001ce:	485a      	ldr	r0, [pc, #360]	; (8000338 <Mode_1+0x1ec>)
 80001d0:	f001 fa8d 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, GPIO_PIN_SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2108      	movs	r1, #8
 80001d8:	4857      	ldr	r0, [pc, #348]	; (8000338 <Mode_1+0x1ec>)
 80001da:	f001 fa88 	bl	80016ee <HAL_GPIO_WritePin>
				if (Main_Dur_count <= 0) {
 80001de:	4b53      	ldr	r3, [pc, #332]	; (800032c <Mode_1+0x1e0>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d126      	bne.n	8000234 <Mode_1+0xe8>
					Main_led = RED;
 80001e6:	4b53      	ldr	r3, [pc, #332]	; (8000334 <Mode_1+0x1e8>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	701a      	strb	r2, [r3, #0]
					Main_Dur_count = RED_Dur_count;
 80001ec:	4b54      	ldr	r3, [pc, #336]	; (8000340 <Mode_1+0x1f4>)
 80001ee:	781a      	ldrb	r2, [r3, #0]
 80001f0:	4b4e      	ldr	r3, [pc, #312]	; (800032c <Mode_1+0x1e0>)
 80001f2:	701a      	strb	r2, [r3, #0]
				break;
 80001f4:	e01e      	b.n	8000234 <Mode_1+0xe8>
				HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, GPIO_PIN_SET);
 80001f6:	2201      	movs	r2, #1
 80001f8:	2102      	movs	r1, #2
 80001fa:	484f      	ldr	r0, [pc, #316]	; (8000338 <Mode_1+0x1ec>)
 80001fc:	f001 fa77 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, GPIO_PIN_SET);
 8000200:	2201      	movs	r2, #1
 8000202:	2104      	movs	r1, #4
 8000204:	484c      	ldr	r0, [pc, #304]	; (8000338 <Mode_1+0x1ec>)
 8000206:	f001 fa72 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, GPIO_PIN_RESET);
 800020a:	2200      	movs	r2, #0
 800020c:	2108      	movs	r1, #8
 800020e:	484a      	ldr	r0, [pc, #296]	; (8000338 <Mode_1+0x1ec>)
 8000210:	f001 fa6d 	bl	80016ee <HAL_GPIO_WritePin>
				if (Main_Dur_count <= 0) {
 8000214:	4b45      	ldr	r3, [pc, #276]	; (800032c <Mode_1+0x1e0>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	2b00      	cmp	r3, #0
 800021a:	d10d      	bne.n	8000238 <Mode_1+0xec>
					Main_led = YELLOW;
 800021c:	4b45      	ldr	r3, [pc, #276]	; (8000334 <Mode_1+0x1e8>)
 800021e:	2202      	movs	r2, #2
 8000220:	701a      	strb	r2, [r3, #0]
					Main_Dur_count = YELLOW_Dur_count;
 8000222:	4b48      	ldr	r3, [pc, #288]	; (8000344 <Mode_1+0x1f8>)
 8000224:	781a      	ldrb	r2, [r3, #0]
 8000226:	4b41      	ldr	r3, [pc, #260]	; (800032c <Mode_1+0x1e0>)
 8000228:	701a      	strb	r2, [r3, #0]
				break;
 800022a:	e005      	b.n	8000238 <Mode_1+0xec>
				break;
 800022c:	bf00      	nop
 800022e:	e004      	b.n	800023a <Mode_1+0xee>
				break;
 8000230:	bf00      	nop
 8000232:	e002      	b.n	800023a <Mode_1+0xee>
				break;
 8000234:	bf00      	nop
 8000236:	e000      	b.n	800023a <Mode_1+0xee>
				break;
 8000238:	bf00      	nop
		}
		// FSM for sub led
		switch (Sub_led) {
 800023a:	4b43      	ldr	r3, [pc, #268]	; (8000348 <Mode_1+0x1fc>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b02      	cmp	r3, #2
 8000240:	d021      	beq.n	8000286 <Mode_1+0x13a>
 8000242:	2b02      	cmp	r3, #2
 8000244:	dc55      	bgt.n	80002f2 <Mode_1+0x1a6>
 8000246:	2b00      	cmp	r3, #0
 8000248:	d002      	beq.n	8000250 <Mode_1+0x104>
 800024a:	2b01      	cmp	r3, #1
 800024c:	d036      	beq.n	80002bc <Mode_1+0x170>
					Sub_led = YELLOW;
					Sub_Dur_count = YELLOW_Dur_count;
				}
				break;
			default: // DO NOT THING
				break;
 800024e:	e050      	b.n	80002f2 <Mode_1+0x1a6>
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_RESET);
 8000250:	2200      	movs	r2, #0
 8000252:	2110      	movs	r1, #16
 8000254:	4838      	ldr	r0, [pc, #224]	; (8000338 <Mode_1+0x1ec>)
 8000256:	f001 fa4a 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	2120      	movs	r1, #32
 800025e:	4836      	ldr	r0, [pc, #216]	; (8000338 <Mode_1+0x1ec>)
 8000260:	f001 fa45 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 8000264:	2201      	movs	r2, #1
 8000266:	2140      	movs	r1, #64	; 0x40
 8000268:	4833      	ldr	r0, [pc, #204]	; (8000338 <Mode_1+0x1ec>)
 800026a:	f001 fa40 	bl	80016ee <HAL_GPIO_WritePin>
				if (Sub_Dur_count <= 0) {
 800026e:	4b30      	ldr	r3, [pc, #192]	; (8000330 <Mode_1+0x1e4>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d13f      	bne.n	80002f6 <Mode_1+0x1aa>
					Sub_led = GREEN;
 8000276:	4b34      	ldr	r3, [pc, #208]	; (8000348 <Mode_1+0x1fc>)
 8000278:	2201      	movs	r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
					Sub_Dur_count = GREEN_Dur_count;
 800027c:	4b2f      	ldr	r3, [pc, #188]	; (800033c <Mode_1+0x1f0>)
 800027e:	781a      	ldrb	r2, [r3, #0]
 8000280:	4b2b      	ldr	r3, [pc, #172]	; (8000330 <Mode_1+0x1e4>)
 8000282:	701a      	strb	r2, [r3, #0]
				break;
 8000284:	e037      	b.n	80002f6 <Mode_1+0x1aa>
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 8000286:	2201      	movs	r2, #1
 8000288:	2110      	movs	r1, #16
 800028a:	482b      	ldr	r0, [pc, #172]	; (8000338 <Mode_1+0x1ec>)
 800028c:	f001 fa2f 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	4828      	ldr	r0, [pc, #160]	; (8000338 <Mode_1+0x1ec>)
 8000296:	f001 fa2a 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2140      	movs	r1, #64	; 0x40
 800029e:	4826      	ldr	r0, [pc, #152]	; (8000338 <Mode_1+0x1ec>)
 80002a0:	f001 fa25 	bl	80016ee <HAL_GPIO_WritePin>
				if (Sub_Dur_count <= 0) {
 80002a4:	4b22      	ldr	r3, [pc, #136]	; (8000330 <Mode_1+0x1e4>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d126      	bne.n	80002fa <Mode_1+0x1ae>
					Sub_led = RED;
 80002ac:	4b26      	ldr	r3, [pc, #152]	; (8000348 <Mode_1+0x1fc>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	701a      	strb	r2, [r3, #0]
					Sub_Dur_count = RED_Dur_count;
 80002b2:	4b23      	ldr	r3, [pc, #140]	; (8000340 <Mode_1+0x1f4>)
 80002b4:	781a      	ldrb	r2, [r3, #0]
 80002b6:	4b1e      	ldr	r3, [pc, #120]	; (8000330 <Mode_1+0x1e4>)
 80002b8:	701a      	strb	r2, [r3, #0]
				break;
 80002ba:	e01e      	b.n	80002fa <Mode_1+0x1ae>
				HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	2110      	movs	r1, #16
 80002c0:	481d      	ldr	r0, [pc, #116]	; (8000338 <Mode_1+0x1ec>)
 80002c2:	f001 fa14 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 80002c6:	2201      	movs	r2, #1
 80002c8:	2120      	movs	r1, #32
 80002ca:	481b      	ldr	r0, [pc, #108]	; (8000338 <Mode_1+0x1ec>)
 80002cc:	f001 fa0f 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2140      	movs	r1, #64	; 0x40
 80002d4:	4818      	ldr	r0, [pc, #96]	; (8000338 <Mode_1+0x1ec>)
 80002d6:	f001 fa0a 	bl	80016ee <HAL_GPIO_WritePin>
				if (Sub_Dur_count <= 0) {
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <Mode_1+0x1e4>)
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d10d      	bne.n	80002fe <Mode_1+0x1b2>
					Sub_led = YELLOW;
 80002e2:	4b19      	ldr	r3, [pc, #100]	; (8000348 <Mode_1+0x1fc>)
 80002e4:	2202      	movs	r2, #2
 80002e6:	701a      	strb	r2, [r3, #0]
					Sub_Dur_count = YELLOW_Dur_count;
 80002e8:	4b16      	ldr	r3, [pc, #88]	; (8000344 <Mode_1+0x1f8>)
 80002ea:	781a      	ldrb	r2, [r3, #0]
 80002ec:	4b10      	ldr	r3, [pc, #64]	; (8000330 <Mode_1+0x1e4>)
 80002ee:	701a      	strb	r2, [r3, #0]
				break;
 80002f0:	e005      	b.n	80002fe <Mode_1+0x1b2>
				break;
 80002f2:	bf00      	nop
 80002f4:	e004      	b.n	8000300 <Mode_1+0x1b4>
				break;
 80002f6:	bf00      	nop
 80002f8:	e002      	b.n	8000300 <Mode_1+0x1b4>
				break;
 80002fa:	bf00      	nop
 80002fc:	e000      	b.n	8000300 <Mode_1+0x1b4>
				break;
 80002fe:	bf00      	nop
		}
		Main_Dur_count--;
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <Mode_1+0x1e0>)
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	3b01      	subs	r3, #1
 8000306:	b2da      	uxtb	r2, r3
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <Mode_1+0x1e0>)
 800030a:	701a      	strb	r2, [r3, #0]
		Sub_Dur_count--;
 800030c:	4b08      	ldr	r3, [pc, #32]	; (8000330 <Mode_1+0x1e4>)
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	3b01      	subs	r3, #1
 8000312:	b2da      	uxtb	r2, r3
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <Mode_1+0x1e4>)
 8000316:	701a      	strb	r2, [r3, #0]
		setTimerSec(1000);
 8000318:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800031c:	f000 faba 	bl	8000894 <setTimerSec>
	}
}
 8000320:	bf00      	nop
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20000059 	.word	0x20000059
 8000328:	40010c00 	.word	0x40010c00
 800032c:	20000003 	.word	0x20000003
 8000330:	20000004 	.word	0x20000004
 8000334:	20000058 	.word	0x20000058
 8000338:	40010800 	.word	0x40010800
 800033c:	20000002 	.word	0x20000002
 8000340:	20000000 	.word	0x20000000
 8000344:	20000001 	.word	0x20000001
 8000348:	20000008 	.word	0x20000008

0800034c <Mode_2>:

//**** MODE 2 ****
void Mode_2(void){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	// Turn of all traffic LED
	HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, GPIO_PIN_SET);
 8000350:	2201      	movs	r2, #1
 8000352:	2104      	movs	r1, #4
 8000354:	4817      	ldr	r0, [pc, #92]	; (80003b4 <Mode_2+0x68>)
 8000356:	f001 f9ca 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2108      	movs	r1, #8
 800035e:	4815      	ldr	r0, [pc, #84]	; (80003b4 <Mode_2+0x68>)
 8000360:	f001 f9c5 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2120      	movs	r1, #32
 8000368:	4812      	ldr	r0, [pc, #72]	; (80003b4 <Mode_2+0x68>)
 800036a:	f001 f9c0 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 800036e:	2201      	movs	r2, #1
 8000370:	2140      	movs	r1, #64	; 0x40
 8000372:	4810      	ldr	r0, [pc, #64]	; (80003b4 <Mode_2+0x68>)
 8000374:	f001 f9bb 	bl	80016ee <HAL_GPIO_WritePin>

	// Update duration in display
	Update_Display(RED_Dur_temp, 2);
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <Mode_2+0x6c>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2102      	movs	r1, #2
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fc34 	bl	8000bec <Update_Display>

	// Blink red led in 2Hz
	if (Blinky_flag){
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <Mode_2+0x70>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d010      	beq.n	80003ae <Mode_2+0x62>
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800038c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000390:	480b      	ldr	r0, [pc, #44]	; (80003c0 <Mode_2+0x74>)
 8000392:	f001 f9c4 	bl	800171e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_0_GPIO_Port, RED_0_Pin);
 8000396:	2102      	movs	r1, #2
 8000398:	4806      	ldr	r0, [pc, #24]	; (80003b4 <Mode_2+0x68>)
 800039a:	f001 f9c0 	bl	800171e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 800039e:	2110      	movs	r1, #16
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <Mode_2+0x68>)
 80003a2:	f001 f9bc 	bl	800171e <HAL_GPIO_TogglePin>
		setTimerBlinky(500); // 500ms - 2Hz
 80003a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003aa:	f000 faab 	bl	8000904 <setTimerBlinky>
	}
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	40010800 	.word	0x40010800
 80003b8:	20000005 	.word	0x20000005
 80003bc:	2000005b 	.word	0x2000005b
 80003c0:	40010c00 	.word	0x40010c00

080003c4 <Mode_3>:

//**** MODE 3 ****
void Mode_3(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	// Turn of all traffic LED
	HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, GPIO_PIN_SET);
 80003c8:	2201      	movs	r2, #1
 80003ca:	2102      	movs	r1, #2
 80003cc:	4817      	ldr	r0, [pc, #92]	; (800042c <Mode_3+0x68>)
 80003ce:	f001 f98e 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2108      	movs	r1, #8
 80003d6:	4815      	ldr	r0, [pc, #84]	; (800042c <Mode_3+0x68>)
 80003d8:	f001 f989 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 80003dc:	2201      	movs	r2, #1
 80003de:	2110      	movs	r1, #16
 80003e0:	4812      	ldr	r0, [pc, #72]	; (800042c <Mode_3+0x68>)
 80003e2:	f001 f984 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, GPIO_PIN_SET);
 80003e6:	2201      	movs	r2, #1
 80003e8:	2140      	movs	r1, #64	; 0x40
 80003ea:	4810      	ldr	r0, [pc, #64]	; (800042c <Mode_3+0x68>)
 80003ec:	f001 f97f 	bl	80016ee <HAL_GPIO_WritePin>

	// Update duration in display
	Update_Display(YELLOW_Dur_temp, 3);
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <Mode_3+0x6c>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2103      	movs	r1, #3
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fbf8 	bl	8000bec <Update_Display>

	// Blink yellow led in 2Hz
	if (Blinky_flag){
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <Mode_3+0x70>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d010      	beq.n	8000426 <Mode_3+0x62>
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8000404:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000408:	480b      	ldr	r0, [pc, #44]	; (8000438 <Mode_3+0x74>)
 800040a:	f001 f988 	bl	800171e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin);
 800040e:	2104      	movs	r1, #4
 8000410:	4806      	ldr	r0, [pc, #24]	; (800042c <Mode_3+0x68>)
 8000412:	f001 f984 	bl	800171e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000416:	2120      	movs	r1, #32
 8000418:	4804      	ldr	r0, [pc, #16]	; (800042c <Mode_3+0x68>)
 800041a:	f001 f980 	bl	800171e <HAL_GPIO_TogglePin>
		setTimerBlinky(500); // 500ms - 2Hz
 800041e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000422:	f000 fa6f 	bl	8000904 <setTimerBlinky>
	}
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40010800 	.word	0x40010800
 8000430:	20000006 	.word	0x20000006
 8000434:	2000005b 	.word	0x2000005b
 8000438:	40010c00 	.word	0x40010c00

0800043c <Mode_4>:

//**** MODE 4 ****
void Mode_4(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	// Turn of all traffic LED
	HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, GPIO_PIN_SET);
 8000440:	2201      	movs	r2, #1
 8000442:	2104      	movs	r1, #4
 8000444:	481e      	ldr	r0, [pc, #120]	; (80004c0 <Mode_4+0x84>)
 8000446:	f001 f952 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	2102      	movs	r1, #2
 800044e:	481c      	ldr	r0, [pc, #112]	; (80004c0 <Mode_4+0x84>)
 8000450:	f001 f94d 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2120      	movs	r1, #32
 8000458:	4819      	ldr	r0, [pc, #100]	; (80004c0 <Mode_4+0x84>)
 800045a:	f001 f948 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2110      	movs	r1, #16
 8000462:	4817      	ldr	r0, [pc, #92]	; (80004c0 <Mode_4+0x84>)
 8000464:	f001 f943 	bl	80016ee <HAL_GPIO_WritePin>

	// Update duration in display
	Update_Display(GREEN_Dur_temp, 4);
 8000468:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <Mode_4+0x88>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2104      	movs	r1, #4
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fbbc 	bl	8000bec <Update_Display>

	// Blink green led in 2Hz
	if (Blinky_flag){
 8000474:	4b14      	ldr	r3, [pc, #80]	; (80004c8 <Mode_4+0x8c>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d010      	beq.n	800049e <Mode_4+0x62>
		HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 800047c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000480:	4812      	ldr	r0, [pc, #72]	; (80004cc <Mode_4+0x90>)
 8000482:	f001 f94c 	bl	800171e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN_0_GPIO_Port, GREEN_0_Pin);
 8000486:	2108      	movs	r1, #8
 8000488:	480d      	ldr	r0, [pc, #52]	; (80004c0 <Mode_4+0x84>)
 800048a:	f001 f948 	bl	800171e <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 800048e:	2140      	movs	r1, #64	; 0x40
 8000490:	480b      	ldr	r0, [pc, #44]	; (80004c0 <Mode_4+0x84>)
 8000492:	f001 f944 	bl	800171e <HAL_GPIO_TogglePin>
		setTimerBlinky(500); // 500ms - 2Hz
 8000496:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800049a:	f000 fa33 	bl	8000904 <setTimerBlinky>
	}

	// Set Main_led and Sub_led to the first case
	Main_led = RED;
 800049e:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <Mode_4+0x94>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
	Sub_led = GREEN;
 80004a4:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <Mode_4+0x98>)
 80004a6:	2201      	movs	r2, #1
 80004a8:	701a      	strb	r2, [r3, #0]
	Main_Dur_count = RED_Dur_count;
 80004aa:	4b0b      	ldr	r3, [pc, #44]	; (80004d8 <Mode_4+0x9c>)
 80004ac:	781a      	ldrb	r2, [r3, #0]
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <Mode_4+0xa0>)
 80004b0:	701a      	strb	r2, [r3, #0]
	Sub_Dur_count = GREEN_Dur_count;
 80004b2:	4b0b      	ldr	r3, [pc, #44]	; (80004e0 <Mode_4+0xa4>)
 80004b4:	781a      	ldrb	r2, [r3, #0]
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <Mode_4+0xa8>)
 80004b8:	701a      	strb	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	40010800 	.word	0x40010800
 80004c4:	20000007 	.word	0x20000007
 80004c8:	2000005b 	.word	0x2000005b
 80004cc:	40010c00 	.word	0x40010c00
 80004d0:	20000058 	.word	0x20000058
 80004d4:	20000008 	.word	0x20000008
 80004d8:	20000000 	.word	0x20000000
 80004dc:	20000003 	.word	0x20000003
 80004e0:	20000002 	.word	0x20000002
 80004e4:	20000004 	.word	0x20000004

080004e8 <Lab3_FSM_Traffic>:
FSM_MODE mode[4] = {Mode_1, Mode_2, Mode_3, Mode_4};
uint8_t Mode_running;
uint32_t Seg_ind;
uint8_t Temp_Red_Duration, Temp_Yellow_Duration, Temp_Green_Duration;

void Lab3_FSM_Traffic(void){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
	//-------READING INPUT AND CALL FUNCTION POINTER-------
	fsm_for_input_processing();
 80004ee:	f000 fa5f 	bl	80009b0 <fsm_for_input_processing>
	mode[Mode_running]();
 80004f2:	4b80      	ldr	r3, [pc, #512]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b7f      	ldr	r3, [pc, #508]	; (80006f8 <Lab3_FSM_Traffic+0x210>)
 80004fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004fe:	4798      	blx	r3

	//-------BUTTON ACTION-------
	// Action when button 1 is pressed
	if ((Button_State[0] == BUTTON_PRESSED) && (Button_State_Temp[0] == BUTTON_RELEASED)) {
 8000500:	4b7e      	ldr	r3, [pc, #504]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d115      	bne.n	8000534 <Lab3_FSM_Traffic+0x4c>
 8000508:	4b7d      	ldr	r3, [pc, #500]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d111      	bne.n	8000534 <Lab3_FSM_Traffic+0x4c>
		Mode_running++;
 8000510:	4b78      	ldr	r3, [pc, #480]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	3301      	adds	r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b76      	ldr	r3, [pc, #472]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 800051a:	701a      	strb	r2, [r3, #0]
		if (Mode_running >= 4){
 800051c:	4b75      	ldr	r3, [pc, #468]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d902      	bls.n	800052a <Lab3_FSM_Traffic+0x42>
			Mode_running = 0;
 8000524:	4b73      	ldr	r3, [pc, #460]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
		}
		Button_State_Temp[0] = Button_State[0];
 800052a:	4b74      	ldr	r3, [pc, #464]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b74      	ldr	r3, [pc, #464]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 8000530:	701a      	strb	r2, [r3, #0]
 8000532:	e0c5      	b.n	80006c0 <Lab3_FSM_Traffic+0x1d8>
	}
	// Action when button 2 is pressed
	else if ((Button_State[1] == BUTTON_PRESSED) && (Button_State_Temp[1] == BUTTON_RELEASED)) {
 8000534:	4b71      	ldr	r3, [pc, #452]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 8000536:	785b      	ldrb	r3, [r3, #1]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d13f      	bne.n	80005bc <Lab3_FSM_Traffic+0xd4>
 800053c:	4b70      	ldr	r3, [pc, #448]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 800053e:	785b      	ldrb	r3, [r3, #1]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d13b      	bne.n	80005bc <Lab3_FSM_Traffic+0xd4>
		switch (Mode_running){
 8000544:	4b6b      	ldr	r3, [pc, #428]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	2b03      	cmp	r3, #3
 800054a:	d832      	bhi.n	80005b2 <Lab3_FSM_Traffic+0xca>
 800054c:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <Lab3_FSM_Traffic+0x6c>)
 800054e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000552:	bf00      	nop
 8000554:	080005b3 	.word	0x080005b3
 8000558:	08000565 	.word	0x08000565
 800055c:	0800057f 	.word	0x0800057f
 8000560:	08000599 	.word	0x08000599
		case 0: // Do nothing
			break;
		case 1: // increase red duration
			RED_Dur_temp = (RED_Dur_temp == 99) ? 99 : (RED_Dur_temp + 1);
 8000564:	4b67      	ldr	r3, [pc, #412]	; (8000704 <Lab3_FSM_Traffic+0x21c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b63      	cmp	r3, #99	; 0x63
 800056a:	d004      	beq.n	8000576 <Lab3_FSM_Traffic+0x8e>
 800056c:	4b65      	ldr	r3, [pc, #404]	; (8000704 <Lab3_FSM_Traffic+0x21c>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	b2db      	uxtb	r3, r3
 8000574:	e000      	b.n	8000578 <Lab3_FSM_Traffic+0x90>
 8000576:	2363      	movs	r3, #99	; 0x63
 8000578:	4a62      	ldr	r2, [pc, #392]	; (8000704 <Lab3_FSM_Traffic+0x21c>)
 800057a:	7013      	strb	r3, [r2, #0]
			break;
 800057c:	e019      	b.n	80005b2 <Lab3_FSM_Traffic+0xca>
		case 2: // increase yellow duration
			YELLOW_Dur_temp = (YELLOW_Dur_temp == 99) ? 99 : (YELLOW_Dur_temp + 1);
 800057e:	4b62      	ldr	r3, [pc, #392]	; (8000708 <Lab3_FSM_Traffic+0x220>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b63      	cmp	r3, #99	; 0x63
 8000584:	d004      	beq.n	8000590 <Lab3_FSM_Traffic+0xa8>
 8000586:	4b60      	ldr	r3, [pc, #384]	; (8000708 <Lab3_FSM_Traffic+0x220>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	b2db      	uxtb	r3, r3
 800058e:	e000      	b.n	8000592 <Lab3_FSM_Traffic+0xaa>
 8000590:	2363      	movs	r3, #99	; 0x63
 8000592:	4a5d      	ldr	r2, [pc, #372]	; (8000708 <Lab3_FSM_Traffic+0x220>)
 8000594:	7013      	strb	r3, [r2, #0]
			break;
 8000596:	e00c      	b.n	80005b2 <Lab3_FSM_Traffic+0xca>
		case 3: // increase green duration
			GREEN_Dur_temp = (GREEN_Dur_temp == 99) ? 99 : (GREEN_Dur_temp + 1);
 8000598:	4b5c      	ldr	r3, [pc, #368]	; (800070c <Lab3_FSM_Traffic+0x224>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b63      	cmp	r3, #99	; 0x63
 800059e:	d004      	beq.n	80005aa <Lab3_FSM_Traffic+0xc2>
 80005a0:	4b5a      	ldr	r3, [pc, #360]	; (800070c <Lab3_FSM_Traffic+0x224>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	3301      	adds	r3, #1
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	e000      	b.n	80005ac <Lab3_FSM_Traffic+0xc4>
 80005aa:	2363      	movs	r3, #99	; 0x63
 80005ac:	4a57      	ldr	r2, [pc, #348]	; (800070c <Lab3_FSM_Traffic+0x224>)
 80005ae:	7013      	strb	r3, [r2, #0]
			break;
 80005b0:	bf00      	nop
		}
		Button_State_Temp[1] = Button_State[1];
 80005b2:	4b52      	ldr	r3, [pc, #328]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 80005b4:	785a      	ldrb	r2, [r3, #1]
 80005b6:	4b52      	ldr	r3, [pc, #328]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 80005b8:	705a      	strb	r2, [r3, #1]
 80005ba:	e081      	b.n	80006c0 <Lab3_FSM_Traffic+0x1d8>
	}

	// Action when button 3 is pressed
	else if ((Button_State[2] == BUTTON_PRESSED) && (Button_State_Temp[2] == BUTTON_RELEASED)) {
 80005bc:	4b4f      	ldr	r3, [pc, #316]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 80005be:	789b      	ldrb	r3, [r3, #2]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d13f      	bne.n	8000644 <Lab3_FSM_Traffic+0x15c>
 80005c4:	4b4e      	ldr	r3, [pc, #312]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 80005c6:	789b      	ldrb	r3, [r3, #2]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d13b      	bne.n	8000644 <Lab3_FSM_Traffic+0x15c>
		switch (Mode_running){
 80005cc:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	2b03      	cmp	r3, #3
 80005d2:	d832      	bhi.n	800063a <Lab3_FSM_Traffic+0x152>
 80005d4:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <Lab3_FSM_Traffic+0xf4>)
 80005d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005da:	bf00      	nop
 80005dc:	0800063b 	.word	0x0800063b
 80005e0:	080005ed 	.word	0x080005ed
 80005e4:	08000607 	.word	0x08000607
 80005e8:	08000621 	.word	0x08000621
		case 0: // Do nothing
			break;
		case 1: // increase red duration
			RED_Dur_temp = (RED_Dur_temp == 1) ? 1 : (RED_Dur_temp - 1);
 80005ec:	4b45      	ldr	r3, [pc, #276]	; (8000704 <Lab3_FSM_Traffic+0x21c>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d004      	beq.n	80005fe <Lab3_FSM_Traffic+0x116>
 80005f4:	4b43      	ldr	r3, [pc, #268]	; (8000704 <Lab3_FSM_Traffic+0x21c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	e000      	b.n	8000600 <Lab3_FSM_Traffic+0x118>
 80005fe:	2301      	movs	r3, #1
 8000600:	4a40      	ldr	r2, [pc, #256]	; (8000704 <Lab3_FSM_Traffic+0x21c>)
 8000602:	7013      	strb	r3, [r2, #0]
			break;
 8000604:	e019      	b.n	800063a <Lab3_FSM_Traffic+0x152>
		case 2: // increase yellow duration
			YELLOW_Dur_temp = (YELLOW_Dur_temp == 1) ? 1 : (YELLOW_Dur_temp - 1);
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <Lab3_FSM_Traffic+0x220>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d004      	beq.n	8000618 <Lab3_FSM_Traffic+0x130>
 800060e:	4b3e      	ldr	r3, [pc, #248]	; (8000708 <Lab3_FSM_Traffic+0x220>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	3b01      	subs	r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	e000      	b.n	800061a <Lab3_FSM_Traffic+0x132>
 8000618:	2301      	movs	r3, #1
 800061a:	4a3b      	ldr	r2, [pc, #236]	; (8000708 <Lab3_FSM_Traffic+0x220>)
 800061c:	7013      	strb	r3, [r2, #0]
			break;
 800061e:	e00c      	b.n	800063a <Lab3_FSM_Traffic+0x152>
		case 3: // increase green duration
			GREEN_Dur_temp = (GREEN_Dur_temp == 1) ? 1 : (GREEN_Dur_temp - 1);
 8000620:	4b3a      	ldr	r3, [pc, #232]	; (800070c <Lab3_FSM_Traffic+0x224>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d004      	beq.n	8000632 <Lab3_FSM_Traffic+0x14a>
 8000628:	4b38      	ldr	r3, [pc, #224]	; (800070c <Lab3_FSM_Traffic+0x224>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	3b01      	subs	r3, #1
 800062e:	b2db      	uxtb	r3, r3
 8000630:	e000      	b.n	8000634 <Lab3_FSM_Traffic+0x14c>
 8000632:	2301      	movs	r3, #1
 8000634:	4a35      	ldr	r2, [pc, #212]	; (800070c <Lab3_FSM_Traffic+0x224>)
 8000636:	7013      	strb	r3, [r2, #0]
			break;
 8000638:	bf00      	nop
		}
		Button_State_Temp[2] = Button_State[2];
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 800063c:	789a      	ldrb	r2, [r3, #2]
 800063e:	4b30      	ldr	r3, [pc, #192]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 8000640:	709a      	strb	r2, [r3, #2]
 8000642:	e03d      	b.n	80006c0 <Lab3_FSM_Traffic+0x1d8>
	}

	// Action when button 4 is pressed
	else if ((Button_State[3] == BUTTON_PRESSED) && (Button_State_Temp[3] == BUTTON_RELEASED)) {
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 8000646:	78db      	ldrb	r3, [r3, #3]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d127      	bne.n	800069c <Lab3_FSM_Traffic+0x1b4>
 800064c:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d123      	bne.n	800069c <Lab3_FSM_Traffic+0x1b4>
		switch (Mode_running){
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <Lab3_FSM_Traffic+0x20c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d81a      	bhi.n	8000692 <Lab3_FSM_Traffic+0x1aa>
 800065c:	a201      	add	r2, pc, #4	; (adr r2, 8000664 <Lab3_FSM_Traffic+0x17c>)
 800065e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000662:	bf00      	nop
 8000664:	08000693 	.word	0x08000693
 8000668:	08000675 	.word	0x08000675
 800066c:	0800067f 	.word	0x0800067f
 8000670:	08000689 	.word	0x08000689
		case 0: // Do nothing
			break;
		case 1: // set red duration
			RED_Dur_count = RED_Dur_temp;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <Lab3_FSM_Traffic+0x21c>)
 8000676:	781a      	ldrb	r2, [r3, #0]
 8000678:	4b25      	ldr	r3, [pc, #148]	; (8000710 <Lab3_FSM_Traffic+0x228>)
 800067a:	701a      	strb	r2, [r3, #0]
			break;
 800067c:	e009      	b.n	8000692 <Lab3_FSM_Traffic+0x1aa>
		case 2: // set yellow duration
			YELLOW_Dur_count = YELLOW_Dur_temp;
 800067e:	4b22      	ldr	r3, [pc, #136]	; (8000708 <Lab3_FSM_Traffic+0x220>)
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <Lab3_FSM_Traffic+0x22c>)
 8000684:	701a      	strb	r2, [r3, #0]
			break;
 8000686:	e004      	b.n	8000692 <Lab3_FSM_Traffic+0x1aa>
		case 3: // set green duration
			GREEN_Dur_count = GREEN_Dur_temp;
 8000688:	4b20      	ldr	r3, [pc, #128]	; (800070c <Lab3_FSM_Traffic+0x224>)
 800068a:	781a      	ldrb	r2, [r3, #0]
 800068c:	4b22      	ldr	r3, [pc, #136]	; (8000718 <Lab3_FSM_Traffic+0x230>)
 800068e:	701a      	strb	r2, [r3, #0]
			break;
 8000690:	bf00      	nop
		}
		Button_State_Temp[3] = Button_State[3];
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 8000694:	78da      	ldrb	r2, [r3, #3]
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 8000698:	70da      	strb	r2, [r3, #3]
 800069a:	e011      	b.n	80006c0 <Lab3_FSM_Traffic+0x1d8>
	}

	// Action else
	else {
		for (int i = 0; i < 4; i++){
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	e00b      	b.n	80006ba <Lab3_FSM_Traffic+0x1d2>
			Button_State_Temp[i] = Button_State[i];
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <Lab3_FSM_Traffic+0x214>)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4413      	add	r3, r2
 80006a8:	7819      	ldrb	r1, [r3, #0]
 80006aa:	4a15      	ldr	r2, [pc, #84]	; (8000700 <Lab3_FSM_Traffic+0x218>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4413      	add	r3, r2
 80006b0:	460a      	mov	r2, r1
 80006b2:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 4; i++){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3301      	adds	r3, #1
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	2b03      	cmp	r3, #3
 80006be:	ddf0      	ble.n	80006a2 <Lab3_FSM_Traffic+0x1ba>
		}
	}

	//-------DISPLAY-------
	if (Seg_flag) {
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <Lab3_FSM_Traffic+0x234>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d011      	beq.n	80006ec <Lab3_FSM_Traffic+0x204>
		Scan_Display(Seg_ind, 2);
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <Lab3_FSM_Traffic+0x238>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2102      	movs	r1, #2
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fb11 	bl	8000cf8 <Scan_Display>
		Seg_ind = (Seg_ind + 1) % 2;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <Lab3_FSM_Traffic+0x238>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	f003 0301 	and.w	r3, r3, #1
 80006e0:	4a0f      	ldr	r2, [pc, #60]	; (8000720 <Lab3_FSM_Traffic+0x238>)
 80006e2:	6013      	str	r3, [r2, #0]
		setTimerScan7Seg(500);
 80006e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006e8:	f000 f8f0 	bl	80008cc <setTimerScan7Seg>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000071 	.word	0x20000071
 80006f8:	2000000c 	.word	0x2000000c
 80006fc:	2000005c 	.word	0x2000005c
 8000700:	20000060 	.word	0x20000060
 8000704:	20000005 	.word	0x20000005
 8000708:	20000006 	.word	0x20000006
 800070c:	20000007 	.word	0x20000007
 8000710:	20000000 	.word	0x20000000
 8000714:	20000001 	.word	0x20000001
 8000718:	20000002 	.word	0x20000002
 800071c:	2000005a 	.word	0x2000005a
 8000720:	20000074 	.word	0x20000074

08000724 <LED7SEG_Init>:
											GPIO_TypeDef* SEG_C,  uint16_t SEG_C_Pin,
											GPIO_TypeDef* SEG_D,  uint16_t SEG_D_Pin,
											GPIO_TypeDef* SEG_E,  uint16_t SEG_E_Pin,
											GPIO_TypeDef* SEG_F,  uint16_t SEG_F_Pin,
											GPIO_TypeDef* SEG_G,  uint16_t SEG_G_Pin)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	4613      	mov	r3, r2
 8000732:	80fb      	strh	r3, [r7, #6]
	LED7SEG->SEG_A = SEG_A;
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	601a      	str	r2, [r3, #0]
	LED7SEG->SEG_B = SEG_B;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	609a      	str	r2, [r3, #8]
	LED7SEG->SEG_C = SEG_C;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	69fa      	ldr	r2, [r7, #28]
 8000744:	611a      	str	r2, [r3, #16]
	LED7SEG->SEG_D = SEG_D;
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800074a:	619a      	str	r2, [r3, #24]
	LED7SEG->SEG_E = SEG_E;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000750:	621a      	str	r2, [r3, #32]
	LED7SEG->SEG_F = SEG_F;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000756:	629a      	str	r2, [r3, #40]	; 0x28
	LED7SEG->SEG_G = SEG_G;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800075c:	631a      	str	r2, [r3, #48]	; 0x30
	LED7SEG->SEG_A_Pin = SEG_A_Pin;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	88fa      	ldrh	r2, [r7, #6]
 8000762:	809a      	strh	r2, [r3, #4]
	LED7SEG->SEG_B_Pin = SEG_B_Pin;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	8b3a      	ldrh	r2, [r7, #24]
 8000768:	819a      	strh	r2, [r3, #12]
	LED7SEG->SEG_C_Pin = SEG_C_Pin;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	8c3a      	ldrh	r2, [r7, #32]
 800076e:	829a      	strh	r2, [r3, #20]
	LED7SEG->SEG_D_Pin = SEG_D_Pin;
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000774:	839a      	strh	r2, [r3, #28]
	LED7SEG->SEG_E_Pin = SEG_E_Pin;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800077a:	849a      	strh	r2, [r3, #36]	; 0x24
	LED7SEG->SEG_F_Pin = SEG_F_Pin;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8000780:	859a      	strh	r2, [r3, #44]	; 0x2c
	LED7SEG->SEG_G_Pin = SEG_G_Pin;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8000788:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <LED7SEG_Write>:

void LED7SEG_Write(LED7SEG_Name* LED7SEG, uint8_t number){
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	460b      	mov	r3, r1
 800079e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(LED7SEG->SEG_A, LED7SEG->SEG_A_Pin, AnodeNumber[number]&0x01?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6818      	ldr	r0, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	8899      	ldrh	r1, [r3, #4]
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	4a33      	ldr	r2, [pc, #204]	; (8000878 <LED7SEG_Write+0xe4>)
 80007ac:	5cd3      	ldrb	r3, [r2, r3]
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	461a      	mov	r2, r3
 80007b6:	f000 ff9a 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7SEG->SEG_B, LED7SEG->SEG_B_Pin, AnodeNumber[number]&0x02?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6898      	ldr	r0, [r3, #8]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	8999      	ldrh	r1, [r3, #12]
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <LED7SEG_Write+0xe4>)
 80007c6:	5cd3      	ldrb	r3, [r2, r3]
 80007c8:	105b      	asrs	r3, r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	461a      	mov	r2, r3
 80007d4:	f000 ff8b 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7SEG->SEG_C, LED7SEG->SEG_C_Pin, AnodeNumber[number]&0x04?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6918      	ldr	r0, [r3, #16]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	8a99      	ldrh	r1, [r3, #20]
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	4a25      	ldr	r2, [pc, #148]	; (8000878 <LED7SEG_Write+0xe4>)
 80007e4:	5cd3      	ldrb	r3, [r2, r3]
 80007e6:	109b      	asrs	r3, r3, #2
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	461a      	mov	r2, r3
 80007f2:	f000 ff7c 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7SEG->SEG_D, LED7SEG->SEG_D_Pin, AnodeNumber[number]&0x08?GPIO_PIN_SET:GPIO_PIN_RESET);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6998      	ldr	r0, [r3, #24]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	8b99      	ldrh	r1, [r3, #28]
 80007fe:	78fb      	ldrb	r3, [r7, #3]
 8000800:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <LED7SEG_Write+0xe4>)
 8000802:	5cd3      	ldrb	r3, [r2, r3]
 8000804:	10db      	asrs	r3, r3, #3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	b2db      	uxtb	r3, r3
 800080e:	461a      	mov	r2, r3
 8000810:	f000 ff6d 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7SEG->SEG_E, LED7SEG->SEG_E_Pin, AnodeNumber[number]&0x10?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6a18      	ldr	r0, [r3, #32]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <LED7SEG_Write+0xe4>)
 8000820:	5cd3      	ldrb	r3, [r2, r3]
 8000822:	111b      	asrs	r3, r3, #4
 8000824:	b2db      	uxtb	r3, r3
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	b2db      	uxtb	r3, r3
 800082c:	461a      	mov	r2, r3
 800082e:	f000 ff5e 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7SEG->SEG_F, LED7SEG->SEG_F_Pin, AnodeNumber[number]&0x20?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 800083a:	78fb      	ldrb	r3, [r7, #3]
 800083c:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <LED7SEG_Write+0xe4>)
 800083e:	5cd3      	ldrb	r3, [r2, r3]
 8000840:	115b      	asrs	r3, r3, #5
 8000842:	b2db      	uxtb	r3, r3
 8000844:	f003 0301 	and.w	r3, r3, #1
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	f000 ff4f 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7SEG->SEG_G, LED7SEG->SEG_G_Pin, AnodeNumber[number]&0x40?GPIO_PIN_SET:GPIO_PIN_RESET);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	4a07      	ldr	r2, [pc, #28]	; (8000878 <LED7SEG_Write+0xe4>)
 800085c:	5cd3      	ldrb	r3, [r2, r3]
 800085e:	119b      	asrs	r3, r3, #6
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	461a      	mov	r2, r3
 800086a:	f000 ff40 	bl	80016ee <HAL_GPIO_WritePin>
}
 800086e:	bf00      	nop
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000001c 	.word	0x2000001c

0800087c <HAL_TIM_PeriodElapsedCallback>:
 */

#include "Timer.h"

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	timer_run();
 8000884:	f000 f85a 	bl	800093c <timer_run>
	button_reading();
 8000888:	f000 f8ce 	bl	8000a28 <button_reading>
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <setTimerSec>:
// Set Timer for count 1 secons
uint8_t Sec_counter;
uint8_t Sec_flag = 0;
uint8_t TIMER_CYCLE = 10;

void setTimerSec(int duration){
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	Sec_counter = duration / TIMER_CYCLE;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <setTimerSec+0x2c>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <setTimerSec+0x30>)
 80008ac:	701a      	strb	r2, [r3, #0]
	Sec_flag = 0;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <setTimerSec+0x34>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000026 	.word	0x20000026
 80008c4:	2000007a 	.word	0x2000007a
 80008c8:	20000059 	.word	0x20000059

080008cc <setTimerScan7Seg>:

// Set Timer for scan LED7SEG
uint8_t Seg_counter;
uint8_t Seg_flag = 0;
void setTimerScan7Seg(int duration){
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	Seg_counter = duration / TIMER_CYCLE;
 80008d4:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <setTimerScan7Seg+0x2c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80008e0:	b2da      	uxtb	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <setTimerScan7Seg+0x30>)
 80008e4:	701a      	strb	r2, [r3, #0]
	Seg_flag = 0;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <setTimerScan7Seg+0x34>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000026 	.word	0x20000026
 80008fc:	20000079 	.word	0x20000079
 8000900:	2000005a 	.word	0x2000005a

08000904 <setTimerBlinky>:

// Set Timer for blinky led 2Hz
uint8_t Blink_counter;
uint8_t Blinky_flag = 0;
void setTimerBlinky(int duration){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	Blink_counter = duration / TIMER_CYCLE;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <setTimerBlinky+0x2c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	fb93 f3f2 	sdiv	r3, r3, r2
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <setTimerBlinky+0x30>)
 800091c:	701a      	strb	r2, [r3, #0]
	Blinky_flag = 0;
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <setTimerBlinky+0x34>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	bc80      	pop	{r7}
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000026 	.word	0x20000026
 8000934:	2000007b 	.word	0x2000007b
 8000938:	2000005b 	.word	0x2000005b

0800093c <timer_run>:

// Timer function
void timer_run(){
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
	if (!(--Sec_counter)){
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <timer_run+0x5c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	3b01      	subs	r3, #1
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <timer_run+0x5c>)
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <timer_run+0x5c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <timer_run+0x1e>
		Sec_flag = 1;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <timer_run+0x60>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
	}
	if (!(--Seg_counter)){
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <timer_run+0x64>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3b01      	subs	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <timer_run+0x64>)
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <timer_run+0x64>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d102      	bne.n	8000974 <timer_run+0x38>
		Seg_flag = 1;
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <timer_run+0x68>)
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
	}
	if (!(--Blink_counter)){
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <timer_run+0x6c>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3b01      	subs	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <timer_run+0x6c>)
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <timer_run+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <timer_run+0x52>
		Blinky_flag = 1;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <timer_run+0x70>)
 800098a:	2201      	movs	r2, #1
 800098c:	701a      	strb	r2, [r3, #0]
	}
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	bc80      	pop	{r7}
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	2000007a 	.word	0x2000007a
 800099c:	20000059 	.word	0x20000059
 80009a0:	20000079 	.word	0x20000079
 80009a4:	2000005a 	.word	0x2000005a
 80009a8:	2000007b 	.word	0x2000007b
 80009ac:	2000005b 	.word	0x2000005b

080009b0 <fsm_for_input_processing>:
#include "input_processing.h"

enum ButtonState Button_State[4] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};
enum ButtonState Button_State_Temp[4] = {BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED, BUTTON_RELEASED};

void fsm_for_input_processing(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
    for(int i = 0; i < 4; i++) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	e02a      	b.n	8000a12 <fsm_for_input_processing+0x62>
        switch(Button_State[i]){
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <fsm_for_input_processing+0x74>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4413      	add	r3, r2
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d002      	beq.n	80009ce <fsm_for_input_processing+0x1e>
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d00e      	beq.n	80009ea <fsm_for_input_processing+0x3a>
 80009cc:	e01e      	b.n	8000a0c <fsm_for_input_processing+0x5c>
            case BUTTON_RELEASED:
                if(is_button_pressed(i)){
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 f86e 	bl	8000ab4 <is_button_pressed>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d013      	beq.n	8000a06 <fsm_for_input_processing+0x56>
                    Button_State[i] = BUTTON_PRESSED;
 80009de:	4a11      	ldr	r2, [pc, #68]	; (8000a24 <fsm_for_input_processing+0x74>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4413      	add	r3, r2
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
                }
                break;
 80009e8:	e00d      	b.n	8000a06 <fsm_for_input_processing+0x56>
            case BUTTON_PRESSED:
                if(!is_button_pressed(i)){
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f860 	bl	8000ab4 <is_button_pressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d107      	bne.n	8000a0a <fsm_for_input_processing+0x5a>
                    Button_State[i] = BUTTON_RELEASED;
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <fsm_for_input_processing+0x74>)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
                }
                break;
 8000a04:	e001      	b.n	8000a0a <fsm_for_input_processing+0x5a>
                break;
 8000a06:	bf00      	nop
 8000a08:	e000      	b.n	8000a0c <fsm_for_input_processing+0x5c>
                break;
 8000a0a:	bf00      	nop
    for(int i = 0; i < 4; i++) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	ddd1      	ble.n	80009bc <fsm_for_input_processing+0xc>
        }
    }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000005c 	.word	0x2000005c

08000a28 <button_reading>:
static GPIO_PinState debounceButtonBuffer1[NO_OF_BUTTONS];
static GPIO_PinState debounceButtonBuffer2[NO_OF_BUTTONS];
// define pinout of button
static uint16_t Button_Pin[NO_OF_BUTTONS] = {BUTTON_1_Pin, BUTTON_2_Pin, BUTTON_3_Pin, BUTTON_4_Pin};

void button_reading(void){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	e02d      	b.n	8000a90 <button_reading+0x68>
		debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a34:	4a1a      	ldr	r2, [pc, #104]	; (8000aa0 <button_reading+0x78>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	7819      	ldrb	r1, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <button_reading+0x7c>)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4413      	add	r3, r2
 8000a42:	460a      	mov	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
		debounceButtonBuffer1[i] = HAL_GPIO_ReadPin(GPIOA, Button_Pin[i]);
 8000a46:	4a18      	ldr	r2, [pc, #96]	; (8000aa8 <button_reading+0x80>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <button_reading+0x84>)
 8000a52:	f000 fe35 	bl	80016c0 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <button_reading+0x78>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	460a      	mov	r2, r1
 8000a62:	701a      	strb	r2, [r3, #0]
		if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i]) {
 8000a64:	4a0e      	ldr	r2, [pc, #56]	; (8000aa0 <button_reading+0x78>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <button_reading+0x7c>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	440b      	add	r3, r1
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d108      	bne.n	8000a8a <button_reading+0x62>
			buttonBuffer[i] = debounceButtonBuffer1[i];
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <button_reading+0x78>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	4413      	add	r3, r2
 8000a7e:	7819      	ldrb	r1, [r3, #0]
 8000a80:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <button_reading+0x88>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	460a      	mov	r2, r1
 8000a88:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NO_OF_BUTTONS; i++) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	ddce      	ble.n	8000a34 <button_reading+0xc>
		}
	}
}
 8000a96:	bf00      	nop
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000068 	.word	0x20000068
 8000aa4:	2000006c 	.word	0x2000006c
 8000aa8:	20000028 	.word	0x20000028
 8000aac:	40010800 	.word	0x40010800
 8000ab0:	20000064 	.word	0x20000064

08000ab4 <is_button_pressed>:

unsigned char is_button_pressed(uint8_t index) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	if (index >= NO_OF_BUTTONS) return 0;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	d901      	bls.n	8000ac8 <is_button_pressed+0x14>
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e007      	b.n	8000ad8 <is_button_pressed+0x24>
	return (buttonBuffer[index] == BUTTON_IS_PRESSED);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a06      	ldr	r2, [pc, #24]	; (8000ae4 <is_button_pressed+0x30>)
 8000acc:	5cd3      	ldrb	r3, [r2, r3]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2301      	moveq	r3, #1
 8000ad4:	2300      	movne	r3, #0
 8000ad6:	b2db      	uxtb	r3, r3
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bc80      	pop	{r7}
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000064 	.word	0x20000064

08000ae8 <Lab3_Led_Init>:
// Init traffic Led and 7seg
//-----------------------------------------------------------------------
LED7SEG_Name SEG1;
LED7SEG_Name SEG2;

void Lab3_Led_Init(void){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af0c      	add	r7, sp, #48	; 0x30
	// Turn off all traffic led
	HAL_GPIO_WritePin(GPIOA, RED_0_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2102      	movs	r1, #2
 8000af2:	483a      	ldr	r0, [pc, #232]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000af4:	f000 fdfb 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW_0_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2104      	movs	r1, #4
 8000afc:	4837      	ldr	r0, [pc, #220]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000afe:	f000 fdf6 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN_0_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2108      	movs	r1, #8
 8000b06:	4835      	ldr	r0, [pc, #212]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b08:	f000 fdf1 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RED_1_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2110      	movs	r1, #16
 8000b10:	4832      	ldr	r0, [pc, #200]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b12:	f000 fdec 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YELLOW_1_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4830      	ldr	r0, [pc, #192]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b1c:	f000 fde7 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GREEN_1_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2140      	movs	r1, #64	; 0x40
 8000b24:	482d      	ldr	r0, [pc, #180]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b26:	f000 fde2 	bl	80016ee <HAL_GPIO_WritePin>

	// Turn off 4 led 7SEG
	HAL_GPIO_WritePin(GPIOA, EN1_1_Pin, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b30:	482a      	ldr	r0, [pc, #168]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b32:	f000 fddc 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN1_2_Pin, GPIO_PIN_SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b3c:	4827      	ldr	r0, [pc, #156]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b3e:	f000 fdd6 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN2_1_Pin, GPIO_PIN_SET);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b48:	4824      	ldr	r0, [pc, #144]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b4a:	f000 fdd0 	bl	80016ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, EN2_2_Pin, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b54:	4821      	ldr	r0, [pc, #132]	; (8000bdc <Lab3_Led_Init+0xf4>)
 8000b56:	f000 fdca 	bl	80016ee <HAL_GPIO_WritePin>

	// Init 2 led 7seg for 2 road
	LED7SEG_Init(&SEG1,	GPIOB, SEG1_0_Pin,
 8000b5a:	2340      	movs	r3, #64	; 0x40
 8000b5c:	930a      	str	r3, [sp, #40]	; 0x28
 8000b5e:	4b20      	ldr	r3, [pc, #128]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b60:	9309      	str	r3, [sp, #36]	; 0x24
 8000b62:	2320      	movs	r3, #32
 8000b64:	9308      	str	r3, [sp, #32]
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b68:	9307      	str	r3, [sp, #28]
 8000b6a:	2310      	movs	r3, #16
 8000b6c:	9306      	str	r3, [sp, #24]
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b70:	9305      	str	r3, [sp, #20]
 8000b72:	2308      	movs	r3, #8
 8000b74:	9304      	str	r3, [sp, #16]
 8000b76:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b78:	9303      	str	r3, [sp, #12]
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	9302      	str	r3, [sp, #8]
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	2302      	movs	r3, #2
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4915      	ldr	r1, [pc, #84]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b8c:	4815      	ldr	r0, [pc, #84]	; (8000be4 <Lab3_Led_Init+0xfc>)
 8000b8e:	f7ff fdc9 	bl	8000724 <LED7SEG_Init>
						GPIOB, SEG1_2_Pin,
						GPIOB, SEG1_3_Pin,
						GPIOB, SEG1_4_Pin,
						GPIOB, SEG1_5_Pin,
						GPIOB, SEG1_6_Pin);
	LED7SEG_Init(&SEG2,	GPIOB, SEG2_0_Pin,
 8000b92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b96:	930a      	str	r3, [sp, #40]	; 0x28
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	9308      	str	r3, [sp, #32]
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000ba4:	9307      	str	r3, [sp, #28]
 8000ba6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000baa:	9306      	str	r3, [sp, #24]
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000bae:	9305      	str	r3, [sp, #20]
 8000bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb4:	9304      	str	r3, [sp, #16]
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000bb8:	9303      	str	r3, [sp, #12]
 8000bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bbe:	9302      	str	r3, [sp, #8]
 8000bc0:	4b07      	ldr	r3, [pc, #28]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000bc2:	9301      	str	r3, [sp, #4]
 8000bc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	4b05      	ldr	r3, [pc, #20]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000bcc:	2280      	movs	r2, #128	; 0x80
 8000bce:	4904      	ldr	r1, [pc, #16]	; (8000be0 <Lab3_Led_Init+0xf8>)
 8000bd0:	4805      	ldr	r0, [pc, #20]	; (8000be8 <Lab3_Led_Init+0x100>)
 8000bd2:	f7ff fda7 	bl	8000724 <LED7SEG_Init>
						GPIOB, SEG2_2_Pin,
						GPIOB, SEG2_3_Pin,
						GPIOB, SEG2_4_Pin,
						GPIOB, SEG2_5_Pin,
						GPIOB, SEG2_6_Pin);
}
 8000bd6:	bf00      	nop
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00
 8000be4:	200000bc 	.word	0x200000bc
 8000be8:	2000007c 	.word	0x2000007c

08000bec <Update_Display>:
// Led7Seg process
//-----------------------------------------------------------------------
int Main_led_buffer[2];
int Sub_led_buffer[2];

void Update_Display(uint8_t main, uint8_t sub){
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	460a      	mov	r2, r1
 8000bf6:	71fb      	strb	r3, [r7, #7]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	71bb      	strb	r3, [r7, #6]
	// Update main road index
	Main_led_buffer[0] = main / 10;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <Update_Display+0x78>)
 8000c00:	fba2 2303 	umull	r2, r3, r2, r3
 8000c04:	08db      	lsrs	r3, r3, #3
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <Update_Display+0x7c>)
 8000c0c:	601a      	str	r2, [r3, #0]
	Main_led_buffer[1] = main % 10;
 8000c0e:	79fa      	ldrb	r2, [r7, #7]
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <Update_Display+0x78>)
 8000c12:	fba3 1302 	umull	r1, r3, r3, r2
 8000c16:	08d9      	lsrs	r1, r3, #3
 8000c18:	460b      	mov	r3, r1
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <Update_Display+0x7c>)
 8000c28:	605a      	str	r2, [r3, #4]
	// Update sub road index
	Sub_led_buffer[0] = sub / 10;
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <Update_Display+0x78>)
 8000c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c32:	08db      	lsrs	r3, r3, #3
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	461a      	mov	r2, r3
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <Update_Display+0x80>)
 8000c3a:	601a      	str	r2, [r3, #0]
	Sub_led_buffer[1] = sub % 10;
 8000c3c:	79ba      	ldrb	r2, [r7, #6]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <Update_Display+0x78>)
 8000c40:	fba3 1302 	umull	r1, r3, r3, r2
 8000c44:	08d9      	lsrs	r1, r3, #3
 8000c46:	460b      	mov	r3, r1
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	1ad3      	subs	r3, r2, r3
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <Update_Display+0x80>)
 8000c56:	605a      	str	r2, [r3, #4]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	cccccccd 	.word	0xcccccccd
 8000c68:	200000f4 	.word	0x200000f4
 8000c6c:	200000b4 	.word	0x200000b4

08000c70 <Enable_led7seg>:

void Enable_led7seg(int num){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	switch (num){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <Enable_led7seg+0x16>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d019      	beq.n	8000cb8 <Enable_led7seg+0x48>
				HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, RESET);
				HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, SET);
				HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, RESET);
				break;
	}
}
 8000c84:	e031      	b.n	8000cea <Enable_led7seg+0x7a>
		case 0: HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, RESET);
 8000c86:	2200      	movs	r2, #0
 8000c88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8c:	4819      	ldr	r0, [pc, #100]	; (8000cf4 <Enable_led7seg+0x84>)
 8000c8e:	f000 fd2e 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c98:	4816      	ldr	r0, [pc, #88]	; (8000cf4 <Enable_led7seg+0x84>)
 8000c9a:	f000 fd28 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca4:	4813      	ldr	r0, [pc, #76]	; (8000cf4 <Enable_led7seg+0x84>)
 8000ca6:	f000 fd22 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb0:	4810      	ldr	r0, [pc, #64]	; (8000cf4 <Enable_led7seg+0x84>)
 8000cb2:	f000 fd1c 	bl	80016ee <HAL_GPIO_WritePin>
				break;
 8000cb6:	e018      	b.n	8000cea <Enable_led7seg+0x7a>
		case 1: HAL_GPIO_WritePin(EN1_1_GPIO_Port, EN1_1_Pin, SET);
 8000cb8:	2201      	movs	r2, #1
 8000cba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cbe:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <Enable_led7seg+0x84>)
 8000cc0:	f000 fd15 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_2_GPIO_Port, EN1_2_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cca:	480a      	ldr	r0, [pc, #40]	; (8000cf4 <Enable_led7seg+0x84>)
 8000ccc:	f000 fd0f 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_1_GPIO_Port, EN2_1_Pin, SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cd6:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <Enable_led7seg+0x84>)
 8000cd8:	f000 fd09 	bl	80016ee <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN2_2_GPIO_Port, EN2_2_Pin, RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ce2:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <Enable_led7seg+0x84>)
 8000ce4:	f000 fd03 	bl	80016ee <HAL_GPIO_WritePin>
				break;
 8000ce8:	bf00      	nop
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40010800 	.word	0x40010800

08000cf8 <Scan_Display>:

void Scan_Display(uint8_t index, uint8_t mode) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	460a      	mov	r2, r1
 8000d02:	71fb      	strb	r3, [r7, #7]
 8000d04:	4613      	mov	r3, r2
 8000d06:	71bb      	strb	r3, [r7, #6]
	Enable_led7seg(index);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ffb0 	bl	8000c70 <Enable_led7seg>
	if (mode == 1){
 8000d10:	79bb      	ldrb	r3, [r7, #6]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d112      	bne.n	8000d3c <Scan_Display+0x44>
		LED7SEG_Write(&SEG1, Main_led_buffer[index]);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4a13      	ldr	r2, [pc, #76]	; (8000d68 <Scan_Display+0x70>)
 8000d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	4619      	mov	r1, r3
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <Scan_Display+0x74>)
 8000d24:	f7ff fd36 	bl	8000794 <LED7SEG_Write>
		LED7SEG_Write(&SEG2, Sub_led_buffer[index]);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <Scan_Display+0x78>)
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	4619      	mov	r1, r3
 8000d34:	480f      	ldr	r0, [pc, #60]	; (8000d74 <Scan_Display+0x7c>)
 8000d36:	f7ff fd2d 	bl	8000794 <LED7SEG_Write>
	else {
		LED7SEG_Write(&SEG1, Main_led_buffer[index]);
		LED7SEG_Write(&SEG2, Sub_led_buffer[index]);
	}

}
 8000d3a:	e011      	b.n	8000d60 <Scan_Display+0x68>
		LED7SEG_Write(&SEG1, Main_led_buffer[index]);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <Scan_Display+0x70>)
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	4619      	mov	r1, r3
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <Scan_Display+0x74>)
 8000d4a:	f7ff fd23 	bl	8000794 <LED7SEG_Write>
		LED7SEG_Write(&SEG2, Sub_led_buffer[index]);
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <Scan_Display+0x78>)
 8000d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4806      	ldr	r0, [pc, #24]	; (8000d74 <Scan_Display+0x7c>)
 8000d5c:	f7ff fd1a 	bl	8000794 <LED7SEG_Write>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	200000f4 	.word	0x200000f4
 8000d6c:	200000bc 	.word	0x200000bc
 8000d70:	200000b4 	.word	0x200000b4
 8000d74:	2000007c 	.word	0x2000007c

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7c:	f000 f9b6 	bl	80010ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d80:	f000 f80e 	bl	8000da0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d84:	f000 f894 	bl	8000eb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d88:	f000 f846 	bl	8000e18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <main+0x24>)
 8000d8e:	f001 f90b 	bl	8001fa8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Lab3_Led_Init();
 8000d92:	f7ff fea9 	bl	8000ae8 <Lab3_Led_Init>
  while (1)
  {
	  Lab3_FSM_Traffic();
 8000d96:	f7ff fba7 	bl	80004e8 <Lab3_FSM_Traffic>
 8000d9a:	e7fc      	b.n	8000d96 <main+0x1e>
 8000d9c:	200000fc 	.word	0x200000fc

08000da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b090      	sub	sp, #64	; 0x40
 8000da4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	2228      	movs	r2, #40	; 0x28
 8000dac:	2100      	movs	r1, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	f001 fcaa 	bl	8002708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dca:	2310      	movs	r3, #16
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 fcba 	bl	8001750 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000de2:	f000 f8c9 	bl	8000f78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 ff26 	bl	8001c50 <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e0a:	f000 f8b5 	bl	8000f78 <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3740      	adds	r7, #64	; 0x40
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0308 	add.w	r3, r7, #8
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e36:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e3e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e42:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e4c:	2209      	movs	r2, #9
 8000e4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e5c:	4813      	ldr	r0, [pc, #76]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e5e:	f001 f853 	bl	8001f08 <HAL_TIM_Base_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e68:	f000 f886 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e72:	f107 0308 	add.w	r3, r7, #8
 8000e76:	4619      	mov	r1, r3
 8000e78:	480c      	ldr	r0, [pc, #48]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e7a:	f001 f9d1 	bl	8002220 <HAL_TIM_ConfigClockSource>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e84:	f000 f878 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e90:	463b      	mov	r3, r7
 8000e92:	4619      	mov	r1, r3
 8000e94:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_TIM2_Init+0x94>)
 8000e96:	f001 fba9 	bl	80025ec <HAL_TIMEx_MasterConfigSynchronization>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ea0:	f000 f86a 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	200000fc 	.word	0x200000fc

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_0_Pin|YELLOW_0_Pin|GREEN_0_Pin|RED_1_Pin
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f24f 017e 	movw	r1, #61566	; 0xf07e
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <MX_GPIO_Init+0xc0>)
 8000efc:	f000 fbf7 	bl	80016ee <HAL_GPIO_WritePin>
                          |YELLOW_1_Pin|GREEN_1_Pin|EN1_1_Pin|EN1_2_Pin
                          |EN2_1_Pin|EN2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG2_3_Pin
 8000f00:	2200      	movs	r2, #0
 8000f02:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <MX_GPIO_Init+0xc4>)
 8000f08:	f000 fbf1 	bl	80016ee <HAL_GPIO_WritePin>
                          |SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED_0_Pin YELLOW_0_Pin GREEN_0_Pin RED_1_Pin
                           YELLOW_1_Pin GREEN_1_Pin EN1_1_Pin EN1_2_Pin
                           EN2_1_Pin EN2_2_Pin */
  GPIO_InitStruct.Pin = RED_0_Pin|YELLOW_0_Pin|GREEN_0_Pin|RED_1_Pin
 8000f0c:	f24f 037e 	movw	r3, #61566	; 0xf07e
 8000f10:	60bb      	str	r3, [r7, #8]
                          |YELLOW_1_Pin|GREEN_1_Pin|EN1_1_Pin|EN1_2_Pin
                          |EN2_1_Pin|EN2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <MX_GPIO_Init+0xc0>)
 8000f26:	f000 fa51 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG1_0_Pin SEG1_1_Pin SEG1_2_Pin SEG2_3_Pin
                           SEG2_4_Pin SEG2_5_Pin SEG2_6_Pin LED_DEBUG_Pin
                           SEG1_3_Pin SEG1_4_Pin SEG1_5_Pin SEG1_6_Pin
                           SEG2_0_Pin SEG2_1_Pin SEG2_2_Pin */
  GPIO_InitStruct.Pin = SEG1_0_Pin|SEG1_1_Pin|SEG1_2_Pin|SEG2_3_Pin
 8000f2a:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000f2e:	60bb      	str	r3, [r7, #8]
                          |SEG2_4_Pin|SEG2_5_Pin|SEG2_6_Pin|LED_DEBUG_Pin
                          |SEG1_3_Pin|SEG1_4_Pin|SEG1_5_Pin|SEG1_6_Pin
                          |SEG2_0_Pin|SEG2_1_Pin|SEG2_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_GPIO_Init+0xc4>)
 8000f44:	f000 fa42 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin BUTTON_4_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin|BUTTON_4_Pin;
 8000f48:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_GPIO_Init+0xc0>)
 8000f5e:	f000 fa35 	bl	80013cc <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	40010c00 	.word	0x40010c00

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6193      	str	r3, [r2, #24]
 8000f96:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000f98:	699b      	ldr	r3, [r3, #24]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fac:	61d3      	str	r3, [r2, #28]
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <HAL_MspInit+0x5c>)
 8000fb0:	69db      	ldr	r3, [r3, #28]
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_MspInit+0x60>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_MspInit+0x60>)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	40010000 	.word	0x40010000

08000fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ff8:	d113      	bne.n	8001022 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <HAL_TIM_Base_MspInit+0x44>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	4a0b      	ldr	r2, [pc, #44]	; (800102c <HAL_TIM_Base_MspInit+0x44>)
 8001000:	f043 0301 	orr.w	r3, r3, #1
 8001004:	61d3      	str	r3, [r2, #28]
 8001006:	4b09      	ldr	r3, [pc, #36]	; (800102c <HAL_TIM_Base_MspInit+0x44>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	201c      	movs	r0, #28
 8001018:	f000 f9a1 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800101c:	201c      	movs	r0, #28
 800101e:	f000 f9ba 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001022:	bf00      	nop
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40021000 	.word	0x40021000

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr

08001072 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001076:	f000 f87f 	bl	8001178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <TIM2_IRQHandler+0x10>)
 8001086:	f000 ffdb 	bl	8002040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	200000fc 	.word	0x200000fc

08001094 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr

080010a0 <Reset_Handler>:
 80010a0:	f7ff fff8 	bl	8001094 <SystemInit>
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <LoopFillZerobss+0xe>)
 80010a6:	490c      	ldr	r1, [pc, #48]	; (80010d8 <LoopFillZerobss+0x12>)
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <LoopFillZerobss+0x16>)
 80010aa:	2300      	movs	r3, #0
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:
 80010ae:	58d4      	ldr	r4, [r2, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:
 80010b4:	18c4      	adds	r4, r0, r3
 80010b6:	428c      	cmp	r4, r1
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
 80010ba:	4a09      	ldr	r2, [pc, #36]	; (80010e0 <LoopFillZerobss+0x1a>)
 80010bc:	4c09      	ldr	r4, [pc, #36]	; (80010e4 <LoopFillZerobss+0x1e>)
 80010be:	2300      	movs	r3, #0
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:
 80010c6:	42a2      	cmp	r2, r4
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>
 80010ca:	f001 faf9 	bl	80026c0 <__libc_init_array>
 80010ce:	f7ff fe53 	bl	8000d78 <main>
 80010d2:	4770      	bx	lr
 80010d4:	20000000 	.word	0x20000000
 80010d8:	2000003c 	.word	0x2000003c
 80010dc:	0800275c 	.word	0x0800275c
 80010e0:	2000003c 	.word	0x2000003c
 80010e4:	20000148 	.word	0x20000148

080010e8 <ADC1_2_IRQHandler>:
 80010e8:	e7fe      	b.n	80010e8 <ADC1_2_IRQHandler>
	...

080010ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_Init+0x28>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a07      	ldr	r2, [pc, #28]	; (8001114 <HAL_Init+0x28>)
 80010f6:	f043 0310 	orr.w	r3, r3, #16
 80010fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010fc:	2003      	movs	r0, #3
 80010fe:	f000 f923 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001102:	200f      	movs	r0, #15
 8001104:	f000 f808 	bl	8001118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001108:	f7ff ff3c 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40022000 	.word	0x40022000

08001118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001120:	4b12      	ldr	r3, [pc, #72]	; (800116c <HAL_InitTick+0x54>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_InitTick+0x58>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001132:	fbb2 f3f3 	udiv	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 f93b 	bl	80013b2 <HAL_SYSTICK_Config>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e00e      	b.n	8001164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b0f      	cmp	r3, #15
 800114a:	d80a      	bhi.n	8001162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800114c:	2200      	movs	r2, #0
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f000 f903 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <HAL_InitTick+0x5c>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
 8001160:	e000      	b.n	8001164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
}
 8001164:	4618      	mov	r0, r3
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000030 	.word	0x20000030
 8001170:	20000038 	.word	0x20000038
 8001174:	20000034 	.word	0x20000034

08001178 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x1c>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x20>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4413      	add	r3, r2
 8001188:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x20>)
 800118a:	6013      	str	r3, [r2, #0]
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	20000038 	.word	0x20000038
 8001198:	20000144 	.word	0x20000144

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	20000144 	.word	0x20000144

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4906      	ldr	r1, [pc, #24]	; (8001248 <__NVIC_EnableIRQ+0x34>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff90 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff2d 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff42 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff35 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b08b      	sub	sp, #44	; 0x2c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013da:	2300      	movs	r3, #0
 80013dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013de:	e148      	b.n	8001672 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013e0:	2201      	movs	r2, #1
 80013e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	f040 8137 	bne.w	800166c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	4aa3      	ldr	r2, [pc, #652]	; (8001690 <HAL_GPIO_Init+0x2c4>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d05e      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001408:	4aa1      	ldr	r2, [pc, #644]	; (8001690 <HAL_GPIO_Init+0x2c4>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d875      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 800140e:	4aa1      	ldr	r2, [pc, #644]	; (8001694 <HAL_GPIO_Init+0x2c8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d058      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001414:	4a9f      	ldr	r2, [pc, #636]	; (8001694 <HAL_GPIO_Init+0x2c8>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d86f      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 800141a:	4a9f      	ldr	r2, [pc, #636]	; (8001698 <HAL_GPIO_Init+0x2cc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d052      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001420:	4a9d      	ldr	r2, [pc, #628]	; (8001698 <HAL_GPIO_Init+0x2cc>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d869      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 8001426:	4a9d      	ldr	r2, [pc, #628]	; (800169c <HAL_GPIO_Init+0x2d0>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d04c      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 800142c:	4a9b      	ldr	r2, [pc, #620]	; (800169c <HAL_GPIO_Init+0x2d0>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d863      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 8001432:	4a9b      	ldr	r2, [pc, #620]	; (80016a0 <HAL_GPIO_Init+0x2d4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d046      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
 8001438:	4a99      	ldr	r2, [pc, #612]	; (80016a0 <HAL_GPIO_Init+0x2d4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d85d      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 800143e:	2b12      	cmp	r3, #18
 8001440:	d82a      	bhi.n	8001498 <HAL_GPIO_Init+0xcc>
 8001442:	2b12      	cmp	r3, #18
 8001444:	d859      	bhi.n	80014fa <HAL_GPIO_Init+0x12e>
 8001446:	a201      	add	r2, pc, #4	; (adr r2, 800144c <HAL_GPIO_Init+0x80>)
 8001448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800144c:	080014c7 	.word	0x080014c7
 8001450:	080014a1 	.word	0x080014a1
 8001454:	080014b3 	.word	0x080014b3
 8001458:	080014f5 	.word	0x080014f5
 800145c:	080014fb 	.word	0x080014fb
 8001460:	080014fb 	.word	0x080014fb
 8001464:	080014fb 	.word	0x080014fb
 8001468:	080014fb 	.word	0x080014fb
 800146c:	080014fb 	.word	0x080014fb
 8001470:	080014fb 	.word	0x080014fb
 8001474:	080014fb 	.word	0x080014fb
 8001478:	080014fb 	.word	0x080014fb
 800147c:	080014fb 	.word	0x080014fb
 8001480:	080014fb 	.word	0x080014fb
 8001484:	080014fb 	.word	0x080014fb
 8001488:	080014fb 	.word	0x080014fb
 800148c:	080014fb 	.word	0x080014fb
 8001490:	080014a9 	.word	0x080014a9
 8001494:	080014bd 	.word	0x080014bd
 8001498:	4a82      	ldr	r2, [pc, #520]	; (80016a4 <HAL_GPIO_Init+0x2d8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800149e:	e02c      	b.n	80014fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	623b      	str	r3, [r7, #32]
          break;
 80014a6:	e029      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	3304      	adds	r3, #4
 80014ae:	623b      	str	r3, [r7, #32]
          break;
 80014b0:	e024      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	3308      	adds	r3, #8
 80014b8:	623b      	str	r3, [r7, #32]
          break;
 80014ba:	e01f      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	330c      	adds	r3, #12
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e01a      	b.n	80014fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d102      	bne.n	80014d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014ce:	2304      	movs	r3, #4
 80014d0:	623b      	str	r3, [r7, #32]
          break;
 80014d2:	e013      	b.n	80014fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d105      	bne.n	80014e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014dc:	2308      	movs	r3, #8
 80014de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	611a      	str	r2, [r3, #16]
          break;
 80014e6:	e009      	b.n	80014fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014e8:	2308      	movs	r3, #8
 80014ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	615a      	str	r2, [r3, #20]
          break;
 80014f2:	e003      	b.n	80014fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014f4:	2300      	movs	r3, #0
 80014f6:	623b      	str	r3, [r7, #32]
          break;
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x130>
          break;
 80014fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	2bff      	cmp	r3, #255	; 0xff
 8001500:	d801      	bhi.n	8001506 <HAL_GPIO_Init+0x13a>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	e001      	b.n	800150a <HAL_GPIO_Init+0x13e>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2bff      	cmp	r3, #255	; 0xff
 8001510:	d802      	bhi.n	8001518 <HAL_GPIO_Init+0x14c>
 8001512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	e002      	b.n	800151e <HAL_GPIO_Init+0x152>
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	3b08      	subs	r3, #8
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	210f      	movs	r1, #15
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	fa01 f303 	lsl.w	r3, r1, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	401a      	ands	r2, r3
 8001530:	6a39      	ldr	r1, [r7, #32]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	431a      	orrs	r2, r3
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8090 	beq.w	800166c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800154c:	4b56      	ldr	r3, [pc, #344]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a55      	ldr	r2, [pc, #340]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_GPIO_Init+0x2dc>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0301 	and.w	r3, r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001564:	4a51      	ldr	r2, [pc, #324]	; (80016ac <HAL_GPIO_Init+0x2e0>)
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	089b      	lsrs	r3, r3, #2
 800156a:	3302      	adds	r3, #2
 800156c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001570:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	220f      	movs	r2, #15
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a49      	ldr	r2, [pc, #292]	; (80016b0 <HAL_GPIO_Init+0x2e4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d00d      	beq.n	80015ac <HAL_GPIO_Init+0x1e0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a48      	ldr	r2, [pc, #288]	; (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d007      	beq.n	80015a8 <HAL_GPIO_Init+0x1dc>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a47      	ldr	r2, [pc, #284]	; (80016b8 <HAL_GPIO_Init+0x2ec>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d101      	bne.n	80015a4 <HAL_GPIO_Init+0x1d8>
 80015a0:	2302      	movs	r3, #2
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x1e2>
 80015a4:	2303      	movs	r3, #3
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x1e2>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x1e2>
 80015ac:	2300      	movs	r3, #0
 80015ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	68fa      	ldr	r2, [r7, #12]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015be:	493b      	ldr	r1, [pc, #236]	; (80016ac <HAL_GPIO_Init+0x2e0>)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d8:	4b38      	ldr	r3, [pc, #224]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	4937      	ldr	r1, [pc, #220]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	608b      	str	r3, [r1, #8]
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 80015e8:	689a      	ldr	r2, [r3, #8]
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	4933      	ldr	r1, [pc, #204]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 80015f0:	4013      	ands	r3, r2
 80015f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d006      	beq.n	800160e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001600:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	492d      	ldr	r1, [pc, #180]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4313      	orrs	r3, r2
 800160a:	60cb      	str	r3, [r1, #12]
 800160c:	e006      	b.n	800161c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	43db      	mvns	r3, r3
 8001616:	4929      	ldr	r1, [pc, #164]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001618:	4013      	ands	r3, r2
 800161a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d006      	beq.n	8001636 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	4923      	ldr	r1, [pc, #140]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
 8001634:	e006      	b.n	8001644 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	43db      	mvns	r3, r3
 800163e:	491f      	ldr	r1, [pc, #124]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001640:	4013      	ands	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d006      	beq.n	800165e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4919      	ldr	r1, [pc, #100]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
 800165c:	e006      	b.n	800166c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	43db      	mvns	r3, r3
 8001666:	4915      	ldr	r1, [pc, #84]	; (80016bc <HAL_GPIO_Init+0x2f0>)
 8001668:	4013      	ands	r3, r2
 800166a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	3301      	adds	r3, #1
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	fa22 f303 	lsr.w	r3, r2, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	f47f aeaf 	bne.w	80013e0 <HAL_GPIO_Init+0x14>
  }
}
 8001682:	bf00      	nop
 8001684:	bf00      	nop
 8001686:	372c      	adds	r7, #44	; 0x2c
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	10320000 	.word	0x10320000
 8001694:	10310000 	.word	0x10310000
 8001698:	10220000 	.word	0x10220000
 800169c:	10210000 	.word	0x10210000
 80016a0:	10120000 	.word	0x10120000
 80016a4:	10110000 	.word	0x10110000
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40010800 	.word	0x40010800
 80016b4:	40010c00 	.word	0x40010c00
 80016b8:	40011000 	.word	0x40011000
 80016bc:	40010400 	.word	0x40010400

080016c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	887b      	ldrh	r3, [r7, #2]
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	73fb      	strb	r3, [r7, #15]
 80016dc:	e001      	b.n	80016e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016de:	2300      	movs	r3, #0
 80016e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	460b      	mov	r3, r1
 80016f8:	807b      	strh	r3, [r7, #2]
 80016fa:	4613      	mov	r3, r2
 80016fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016fe:	787b      	ldrb	r3, [r7, #1]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001704:	887a      	ldrh	r2, [r7, #2]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800170a:	e003      	b.n	8001714 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	041a      	lsls	r2, r3, #16
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	611a      	str	r2, [r3, #16]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171e:	b480      	push	{r7}
 8001720:	b085      	sub	sp, #20
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	460b      	mov	r3, r1
 8001728:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001730:	887a      	ldrh	r2, [r7, #2]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	4013      	ands	r3, r2
 8001736:	041a      	lsls	r2, r3, #16
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	43d9      	mvns	r1, r3
 800173c:	887b      	ldrh	r3, [r7, #2]
 800173e:	400b      	ands	r3, r1
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	611a      	str	r2, [r3, #16]
}
 8001746:	bf00      	nop
 8001748:	3714      	adds	r7, #20
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e26c      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b00      	cmp	r3, #0
 800176c:	f000 8087 	beq.w	800187e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001770:	4b92      	ldr	r3, [pc, #584]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 030c 	and.w	r3, r3, #12
 8001778:	2b04      	cmp	r3, #4
 800177a:	d00c      	beq.n	8001796 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800177c:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f003 030c 	and.w	r3, r3, #12
 8001784:	2b08      	cmp	r3, #8
 8001786:	d112      	bne.n	80017ae <HAL_RCC_OscConfig+0x5e>
 8001788:	4b8c      	ldr	r3, [pc, #560]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001794:	d10b      	bne.n	80017ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	4b89      	ldr	r3, [pc, #548]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d06c      	beq.n	800187c <HAL_RCC_OscConfig+0x12c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d168      	bne.n	800187c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e246      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x76>
 80017b8:	4b80      	ldr	r3, [pc, #512]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a7f      	ldr	r2, [pc, #508]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	e02e      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x98>
 80017ce:	4b7b      	ldr	r3, [pc, #492]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7a      	ldr	r2, [pc, #488]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d8:	6013      	str	r3, [r2, #0]
 80017da:	4b78      	ldr	r3, [pc, #480]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a77      	ldr	r2, [pc, #476]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	e01d      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0xbc>
 80017f2:	4b72      	ldr	r3, [pc, #456]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a71      	ldr	r2, [pc, #452]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80017f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a6e      	ldr	r2, [pc, #440]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0xd4>
 800180c:	4b6b      	ldr	r3, [pc, #428]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a6a      	ldr	r2, [pc, #424]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b68      	ldr	r3, [pc, #416]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a67      	ldr	r2, [pc, #412]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182c:	f7ff fcb6 	bl	800119c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fcb2 	bl	800119c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1fa      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0xe4>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001854:	f7ff fca2 	bl	800119c <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff fc9e 	bl	800119c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e1e6      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186e:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x10c>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d063      	beq.n	8001952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800188a:	4b4c      	ldr	r3, [pc, #304]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 030c 	and.w	r3, r3, #12
 8001892:	2b00      	cmp	r3, #0
 8001894:	d00b      	beq.n	80018ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f003 030c 	and.w	r3, r3, #12
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d11c      	bne.n	80018dc <HAL_RCC_OscConfig+0x18c>
 80018a2:	4b46      	ldr	r3, [pc, #280]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d116      	bne.n	80018dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d005      	beq.n	80018c6 <HAL_RCC_OscConfig+0x176>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d001      	beq.n	80018c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e1ba      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4939      	ldr	r1, [pc, #228]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018da:	e03a      	b.n	8001952 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d020      	beq.n	8001926 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018e6:	2201      	movs	r2, #1
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fc57 	bl	800119c <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fc53 	bl	800119c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e19b      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	695b      	ldr	r3, [r3, #20]
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4927      	ldr	r1, [pc, #156]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001920:	4313      	orrs	r3, r2
 8001922:	600b      	str	r3, [r1, #0]
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001926:	4b26      	ldr	r3, [pc, #152]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192c:	f7ff fc36 	bl	800119c <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001934:	f7ff fc32 	bl	800119c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e17a      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	2b00      	cmp	r3, #0
 800195c:	d03a      	beq.n	80019d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d019      	beq.n	800199a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001966:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <HAL_RCC_OscConfig+0x274>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196c:	f7ff fc16 	bl	800119c <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fc12 	bl	800119c <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e15a      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_RCC_OscConfig+0x26c>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001992:	2001      	movs	r0, #1
 8001994:	f000 fa9a 	bl	8001ecc <RCC_Delay>
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCC_OscConfig+0x274>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019a0:	f7ff fbfc 	bl	800119c <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a6:	e00f      	b.n	80019c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a8:	f7ff fbf8 	bl	800119c <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d908      	bls.n	80019c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e140      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	42420000 	.word	0x42420000
 80019c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	4b9e      	ldr	r3, [pc, #632]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 80019ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e9      	bne.n	80019a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 80a6 	beq.w	8001b2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b97      	ldr	r3, [pc, #604]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10d      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	4b94      	ldr	r3, [pc, #592]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	4a93      	ldr	r2, [pc, #588]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fc:	61d3      	str	r3, [r2, #28]
 80019fe:	4b91      	ldr	r3, [pc, #580]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a0e:	4b8e      	ldr	r3, [pc, #568]	; (8001c48 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1a:	4b8b      	ldr	r3, [pc, #556]	; (8001c48 <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a8a      	ldr	r2, [pc, #552]	; (8001c48 <HAL_RCC_OscConfig+0x4f8>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a26:	f7ff fbb9 	bl	800119c <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	e008      	b.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2e:	f7ff fbb5 	bl	800119c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b64      	cmp	r3, #100	; 0x64
 8001a3a:	d901      	bls.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e0fd      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a40:	4b81      	ldr	r3, [pc, #516]	; (8001c48 <HAL_RCC_OscConfig+0x4f8>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0f0      	beq.n	8001a2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d106      	bne.n	8001a62 <HAL_RCC_OscConfig+0x312>
 8001a54:	4b7b      	ldr	r3, [pc, #492]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a56:	6a1b      	ldr	r3, [r3, #32]
 8001a58:	4a7a      	ldr	r2, [pc, #488]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6213      	str	r3, [r2, #32]
 8001a60:	e02d      	b.n	8001abe <HAL_RCC_OscConfig+0x36e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10c      	bne.n	8001a84 <HAL_RCC_OscConfig+0x334>
 8001a6a:	4b76      	ldr	r3, [pc, #472]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4a75      	ldr	r2, [pc, #468]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a70:	f023 0301 	bic.w	r3, r3, #1
 8001a74:	6213      	str	r3, [r2, #32]
 8001a76:	4b73      	ldr	r3, [pc, #460]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	4a72      	ldr	r2, [pc, #456]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a7c:	f023 0304 	bic.w	r3, r3, #4
 8001a80:	6213      	str	r3, [r2, #32]
 8001a82:	e01c      	b.n	8001abe <HAL_RCC_OscConfig+0x36e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b05      	cmp	r3, #5
 8001a8a:	d10c      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x356>
 8001a8c:	4b6d      	ldr	r3, [pc, #436]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4a6c      	ldr	r2, [pc, #432]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6213      	str	r3, [r2, #32]
 8001a98:	4b6a      	ldr	r3, [pc, #424]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	4a69      	ldr	r2, [pc, #420]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001a9e:	f043 0301 	orr.w	r3, r3, #1
 8001aa2:	6213      	str	r3, [r2, #32]
 8001aa4:	e00b      	b.n	8001abe <HAL_RCC_OscConfig+0x36e>
 8001aa6:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	4a66      	ldr	r2, [pc, #408]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	6213      	str	r3, [r2, #32]
 8001ab2:	4b64      	ldr	r3, [pc, #400]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	6a1b      	ldr	r3, [r3, #32]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001ab8:	f023 0304 	bic.w	r3, r3, #4
 8001abc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d015      	beq.n	8001af2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fb69 	bl	800119c <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7ff fb65 	bl	800119c <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e0ab      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae4:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0ee      	beq.n	8001ace <HAL_RCC_OscConfig+0x37e>
 8001af0:	e014      	b.n	8001b1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fb53 	bl	800119c <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af8:	e00a      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001afa:	f7ff fb4f 	bl	800119c <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e095      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ee      	bne.n	8001afa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b1c:	7dfb      	ldrb	r3, [r7, #23]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d105      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b22:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	69db      	ldr	r3, [r3, #28]
 8001b26:	4a47      	ldr	r2, [pc, #284]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8081 	beq.w	8001c3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b38:	4b42      	ldr	r3, [pc, #264]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 030c 	and.w	r3, r3, #12
 8001b40:	2b08      	cmp	r3, #8
 8001b42:	d061      	beq.n	8001c08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	69db      	ldr	r3, [r3, #28]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d146      	bne.n	8001bda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4c:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_OscConfig+0x4fc>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b52:	f7ff fb23 	bl	800119c <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff fb1f 	bl	800119c <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e067      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b82:	4b30      	ldr	r3, [pc, #192]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	492d      	ldr	r1, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b94:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a19      	ldr	r1, [r3, #32]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	430b      	orrs	r3, r1
 8001ba6:	4927      	ldr	r1, [pc, #156]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x4fc>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb2:	f7ff faf3 	bl	800119c <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb8:	e008      	b.n	8001bcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff faef 	bl	800119c <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e037      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d0f0      	beq.n	8001bba <HAL_RCC_OscConfig+0x46a>
 8001bd8:	e02f      	b.n	8001c3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_RCC_OscConfig+0x4fc>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fadc 	bl	800119c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be8:	f7ff fad8 	bl	800119c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e020      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfa:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x498>
 8001c06:	e018      	b.n	8001c3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69db      	ldr	r3, [r3, #28]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e013      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3718      	adds	r7, #24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40007000 	.word	0x40007000
 8001c4c:	42420060 	.word	0x42420060

08001c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0d0      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4b6a      	ldr	r3, [pc, #424]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d910      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b67      	ldr	r3, [pc, #412]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 0207 	bic.w	r2, r3, #7
 8001c7a:	4965      	ldr	r1, [pc, #404]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b63      	ldr	r3, [pc, #396]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b8      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d020      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b59      	ldr	r3, [pc, #356]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a58      	ldr	r2, [pc, #352]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d005      	beq.n	8001cd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cc4:	4b53      	ldr	r3, [pc, #332]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	4a52      	ldr	r2, [pc, #328]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b50      	ldr	r3, [pc, #320]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	494d      	ldr	r1, [pc, #308]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d040      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b47      	ldr	r3, [pc, #284]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d115      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d107      	bne.n	8001d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0e:	4b41      	ldr	r3, [pc, #260]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e073      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d1e:	4b3d      	ldr	r3, [pc, #244]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e06b      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d2e:	4b39      	ldr	r3, [pc, #228]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f023 0203 	bic.w	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4936      	ldr	r1, [pc, #216]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d40:	f7ff fa2c 	bl	800119c <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7ff fa28 	bl	800119c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e053      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 020c 	and.w	r2, r3, #12
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d1eb      	bne.n	8001d48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d210      	bcs.n	8001da0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 0207 	bic.w	r2, r3, #7
 8001d86:	4922      	ldr	r1, [pc, #136]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	683a      	ldr	r2, [r7, #0]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d001      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e032      	b.n	8001e06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dac:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4916      	ldr	r1, [pc, #88]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	490e      	ldr	r1, [pc, #56]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dde:	f000 f821 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	490a      	ldr	r1, [pc, #40]	; (8001e18 <HAL_RCC_ClockConfig+0x1c8>)
 8001df0:	5ccb      	ldrb	r3, [r1, r3]
 8001df2:	fa22 f303 	lsr.w	r3, r2, r3
 8001df6:	4a09      	ldr	r2, [pc, #36]	; (8001e1c <HAL_RCC_ClockConfig+0x1cc>)
 8001df8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_ClockConfig+0x1d0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f98a 	bl	8001118 <HAL_InitTick>

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40022000 	.word	0x40022000
 8001e14:	40021000 	.word	0x40021000
 8001e18:	08002730 	.word	0x08002730
 8001e1c:	20000030 	.word	0x20000030
 8001e20:	20000034 	.word	0x20000034

08001e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b087      	sub	sp, #28
 8001e28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_GetSysClockFreq+0x30>
 8001e4e:	2b08      	cmp	r3, #8
 8001e50:	d003      	beq.n	8001e5a <HAL_RCC_GetSysClockFreq+0x36>
 8001e52:	e027      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8001e56:	613b      	str	r3, [r7, #16]
      break;
 8001e58:	e027      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	0c9b      	lsrs	r3, r3, #18
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	4a17      	ldr	r2, [pc, #92]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e64:	5cd3      	ldrb	r3, [r2, r3]
 8001e66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	0c5b      	lsrs	r3, r3, #17
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e7e:	5cd3      	ldrb	r3, [r2, r3]
 8001e80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8001e86:	fb02 f203 	mul.w	r2, r2, r3
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e004      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e98:	fb02 f303 	mul.w	r3, r2, r3
 8001e9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	613b      	str	r3, [r7, #16]
      break;
 8001ea2:	e002      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x98>)
 8001ea6:	613b      	str	r3, [r7, #16]
      break;
 8001ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001eaa:	693b      	ldr	r3, [r7, #16]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bc80      	pop	{r7}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	007a1200 	.word	0x007a1200
 8001ec0:	08002740 	.word	0x08002740
 8001ec4:	08002750 	.word	0x08002750
 8001ec8:	003d0900 	.word	0x003d0900

08001ecc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed4:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <RCC_Delay+0x34>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <RCC_Delay+0x38>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0a5b      	lsrs	r3, r3, #9
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	fb02 f303 	mul.w	r3, r2, r3
 8001ee6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee8:	bf00      	nop
  }
  while (Delay --);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	1e5a      	subs	r2, r3, #1
 8001eee:	60fa      	str	r2, [r7, #12]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1f9      	bne.n	8001ee8 <RCC_Delay+0x1c>
}
 8001ef4:	bf00      	nop
 8001ef6:	bf00      	nop
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000030 	.word	0x20000030
 8001f04:	10624dd3 	.word	0x10624dd3

08001f08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e041      	b.n	8001f9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d106      	bne.n	8001f34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff f85a 	bl	8000fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2202      	movs	r2, #2
 8001f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3304      	adds	r3, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4610      	mov	r0, r2
 8001f48:	f000 fa56 	bl	80023f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d001      	beq.n	8001fc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e035      	b.n	800202c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_TIM_Base_Start_IT+0x90>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d009      	beq.n	8001ff6 <HAL_TIM_Base_Start_IT+0x4e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fea:	d004      	beq.n	8001ff6 <HAL_TIM_Base_Start_IT+0x4e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a12      	ldr	r2, [pc, #72]	; (800203c <HAL_TIM_Base_Start_IT+0x94>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d111      	bne.n	800201a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2b06      	cmp	r3, #6
 8002006:	d010      	beq.n	800202a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0201 	orr.w	r2, r2, #1
 8002016:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002018:	e007      	b.n	800202a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f042 0201 	orr.w	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40000400 	.word	0x40000400

08002040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d020      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d01b      	beq.n	80020a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f06f 0202 	mvn.w	r2, #2
 8002074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 0303 	and.w	r3, r3, #3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f998 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 8002090:	e005      	b.n	800209e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f98b 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f99a 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d020      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f06f 0204 	mvn.w	r2, #4
 80020c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f972 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 80020dc:	e005      	b.n	80020ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f965 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f974 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d020      	beq.n	800213c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0308 	and.w	r3, r3, #8
 8002100:	2b00      	cmp	r3, #0
 8002102:	d01b      	beq.n	800213c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f06f 0208 	mvn.w	r2, #8
 800210c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2204      	movs	r2, #4
 8002112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f94c 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 8002128:	e005      	b.n	8002136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f93f 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f94e 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	2b00      	cmp	r3, #0
 8002144:	d020      	beq.n	8002188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b00      	cmp	r3, #0
 800214e:	d01b      	beq.n	8002188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0210 	mvn.w	r2, #16
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2208      	movs	r2, #8
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f926 	bl	80023c0 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f919 	bl	80023ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f928 	bl	80023d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0201 	mvn.w	r2, #1
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7fe fb68 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa6f 	bl	80026ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00c      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d007      	beq.n	80021f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f8f8 	bl	80023e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00c      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 0320 	and.w	r3, r3, #32
 8002204:	2b00      	cmp	r3, #0
 8002206:	d007      	beq.n	8002218 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f06f 0220 	mvn.w	r2, #32
 8002210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 fa42 	bl	800269c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002218:	bf00      	nop
 800221a:	3710      	adds	r7, #16
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002234:	2b01      	cmp	r3, #1
 8002236:	d101      	bne.n	800223c <HAL_TIM_ConfigClockSource+0x1c>
 8002238:	2302      	movs	r3, #2
 800223a:	e0b4      	b.n	80023a6 <HAL_TIM_ConfigClockSource+0x186>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2201      	movs	r2, #1
 8002240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800225a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002274:	d03e      	beq.n	80022f4 <HAL_TIM_ConfigClockSource+0xd4>
 8002276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800227a:	f200 8087 	bhi.w	800238c <HAL_TIM_ConfigClockSource+0x16c>
 800227e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002282:	f000 8086 	beq.w	8002392 <HAL_TIM_ConfigClockSource+0x172>
 8002286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800228a:	d87f      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 800228c:	2b70      	cmp	r3, #112	; 0x70
 800228e:	d01a      	beq.n	80022c6 <HAL_TIM_ConfigClockSource+0xa6>
 8002290:	2b70      	cmp	r3, #112	; 0x70
 8002292:	d87b      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 8002294:	2b60      	cmp	r3, #96	; 0x60
 8002296:	d050      	beq.n	800233a <HAL_TIM_ConfigClockSource+0x11a>
 8002298:	2b60      	cmp	r3, #96	; 0x60
 800229a:	d877      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 800229c:	2b50      	cmp	r3, #80	; 0x50
 800229e:	d03c      	beq.n	800231a <HAL_TIM_ConfigClockSource+0xfa>
 80022a0:	2b50      	cmp	r3, #80	; 0x50
 80022a2:	d873      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d058      	beq.n	800235a <HAL_TIM_ConfigClockSource+0x13a>
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d86f      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022ac:	2b30      	cmp	r3, #48	; 0x30
 80022ae:	d064      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022b0:	2b30      	cmp	r3, #48	; 0x30
 80022b2:	d86b      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022b4:	2b20      	cmp	r3, #32
 80022b6:	d060      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d867      	bhi.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d05c      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022c0:	2b10      	cmp	r3, #16
 80022c2:	d05a      	beq.n	800237a <HAL_TIM_ConfigClockSource+0x15a>
 80022c4:	e062      	b.n	800238c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	6899      	ldr	r1, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f000 f96a 	bl	80025ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80022e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	609a      	str	r2, [r3, #8]
      break;
 80022f2:	e04f      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6818      	ldr	r0, [r3, #0]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	6899      	ldr	r1, [r3, #8]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f000 f953 	bl	80025ae <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002316:	609a      	str	r2, [r3, #8]
      break;
 8002318:	e03c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	6859      	ldr	r1, [r3, #4]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	461a      	mov	r2, r3
 8002328:	f000 f8ca 	bl	80024c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2150      	movs	r1, #80	; 0x50
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f921 	bl	800257a <TIM_ITRx_SetConfig>
      break;
 8002338:	e02c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6859      	ldr	r1, [r3, #4]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	461a      	mov	r2, r3
 8002348:	f000 f8e8 	bl	800251c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2160      	movs	r1, #96	; 0x60
 8002352:	4618      	mov	r0, r3
 8002354:	f000 f911 	bl	800257a <TIM_ITRx_SetConfig>
      break;
 8002358:	e01c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6818      	ldr	r0, [r3, #0]
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6859      	ldr	r1, [r3, #4]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	461a      	mov	r2, r3
 8002368:	f000 f8aa 	bl	80024c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2140      	movs	r1, #64	; 0x40
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f901 	bl	800257a <TIM_ITRx_SetConfig>
      break;
 8002378:	e00c      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	4610      	mov	r0, r2
 8002386:	f000 f8f8 	bl	800257a <TIM_ITRx_SetConfig>
      break;
 800238a:	e003      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	73fb      	strb	r3, [r7, #15]
      break;
 8002390:	e000      	b.n	8002394 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80023a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr

080023d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
	...

080023f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	4a2b      	ldr	r2, [pc, #172]	; (80024b8 <TIM_Base_SetConfig+0xc0>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d007      	beq.n	8002420 <TIM_Base_SetConfig+0x28>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002416:	d003      	beq.n	8002420 <TIM_Base_SetConfig+0x28>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	4a28      	ldr	r2, [pc, #160]	; (80024bc <TIM_Base_SetConfig+0xc4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d108      	bne.n	8002432 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	68fa      	ldr	r2, [r7, #12]
 800242e:	4313      	orrs	r3, r2
 8002430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a20      	ldr	r2, [pc, #128]	; (80024b8 <TIM_Base_SetConfig+0xc0>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d007      	beq.n	800244a <TIM_Base_SetConfig+0x52>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002440:	d003      	beq.n	800244a <TIM_Base_SetConfig+0x52>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <TIM_Base_SetConfig+0xc4>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d108      	bne.n	800245c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <TIM_Base_SetConfig+0xc0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d103      	bne.n	8002490 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d005      	beq.n	80024ae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	f023 0201 	bic.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	611a      	str	r2, [r3, #16]
  }
}
 80024ae:	bf00      	nop
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000400 	.word	0x40000400

080024c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f023 0201 	bic.w	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	011b      	lsls	r3, r3, #4
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f023 030a 	bic.w	r3, r3, #10
 80024fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	4313      	orrs	r3, r2
 8002504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	621a      	str	r2, [r3, #32]
}
 8002512:	bf00      	nop
 8002514:	371c      	adds	r7, #28
 8002516:	46bd      	mov	sp, r7
 8002518:	bc80      	pop	{r7}
 800251a:	4770      	bx	lr

0800251c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800251c:	b480      	push	{r7}
 800251e:	b087      	sub	sp, #28
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	f023 0210 	bic.w	r2, r3, #16
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	031b      	lsls	r3, r3, #12
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002558:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	621a      	str	r2, [r3, #32]
}
 8002570:	bf00      	nop
 8002572:	371c      	adds	r7, #28
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr

0800257a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800257a:	b480      	push	{r7}
 800257c:	b085      	sub	sp, #20
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
 8002582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	f043 0307 	orr.w	r3, r3, #7
 800259c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68fa      	ldr	r2, [r7, #12]
 80025a2:	609a      	str	r2, [r3, #8]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bc80      	pop	{r7}
 80025ac:	4770      	bx	lr

080025ae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b087      	sub	sp, #28
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	60f8      	str	r0, [r7, #12]
 80025b6:	60b9      	str	r1, [r7, #8]
 80025b8:	607a      	str	r2, [r7, #4]
 80025ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025c8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	021a      	lsls	r2, r3, #8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	4313      	orrs	r3, r2
 80025da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	609a      	str	r2, [r3, #8]
}
 80025e2:	bf00      	nop
 80025e4:	371c      	adds	r7, #28
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002600:	2302      	movs	r3, #2
 8002602:	e041      	b.n	8002688 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2202      	movs	r2, #2
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a14      	ldr	r2, [pc, #80]	; (8002694 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d009      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d004      	beq.n	800265c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a10      	ldr	r2, [pc, #64]	; (8002698 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10c      	bne.n	8002676 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002662:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	68ba      	ldr	r2, [r7, #8]
 800266a:	4313      	orrs	r3, r2
 800266c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	bc80      	pop	{r7}
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40012c00 	.word	0x40012c00
 8002698:	40000400 	.word	0x40000400

0800269c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr

080026ae <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc80      	pop	{r7}
 80026be:	4770      	bx	lr

080026c0 <__libc_init_array>:
 80026c0:	b570      	push	{r4, r5, r6, lr}
 80026c2:	2600      	movs	r6, #0
 80026c4:	4d0c      	ldr	r5, [pc, #48]	; (80026f8 <__libc_init_array+0x38>)
 80026c6:	4c0d      	ldr	r4, [pc, #52]	; (80026fc <__libc_init_array+0x3c>)
 80026c8:	1b64      	subs	r4, r4, r5
 80026ca:	10a4      	asrs	r4, r4, #2
 80026cc:	42a6      	cmp	r6, r4
 80026ce:	d109      	bne.n	80026e4 <__libc_init_array+0x24>
 80026d0:	f000 f822 	bl	8002718 <_init>
 80026d4:	2600      	movs	r6, #0
 80026d6:	4d0a      	ldr	r5, [pc, #40]	; (8002700 <__libc_init_array+0x40>)
 80026d8:	4c0a      	ldr	r4, [pc, #40]	; (8002704 <__libc_init_array+0x44>)
 80026da:	1b64      	subs	r4, r4, r5
 80026dc:	10a4      	asrs	r4, r4, #2
 80026de:	42a6      	cmp	r6, r4
 80026e0:	d105      	bne.n	80026ee <__libc_init_array+0x2e>
 80026e2:	bd70      	pop	{r4, r5, r6, pc}
 80026e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026e8:	4798      	blx	r3
 80026ea:	3601      	adds	r6, #1
 80026ec:	e7ee      	b.n	80026cc <__libc_init_array+0xc>
 80026ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f2:	4798      	blx	r3
 80026f4:	3601      	adds	r6, #1
 80026f6:	e7f2      	b.n	80026de <__libc_init_array+0x1e>
 80026f8:	08002754 	.word	0x08002754
 80026fc:	08002754 	.word	0x08002754
 8002700:	08002754 	.word	0x08002754
 8002704:	08002758 	.word	0x08002758

08002708 <memset>:
 8002708:	4603      	mov	r3, r0
 800270a:	4402      	add	r2, r0
 800270c:	4293      	cmp	r3, r2
 800270e:	d100      	bne.n	8002712 <memset+0xa>
 8002710:	4770      	bx	lr
 8002712:	f803 1b01 	strb.w	r1, [r3], #1
 8002716:	e7f9      	b.n	800270c <memset+0x4>

08002718 <_init>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr

08002724 <_fini>:
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002726:	bf00      	nop
 8002728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272a:	bc08      	pop	{r3}
 800272c:	469e      	mov	lr, r3
 800272e:	4770      	bx	lr
